!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/yoba\/code\/testing-system\/missing aclocal-1.14$/;"	m
ACLOCAL_AMFLAGS	Makefile	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = cscope$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AR	Makefile	/^AR = ar$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/yoba\/code\/testing-system\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/yoba\/code\/testing-system\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/yoba\/code\/testing-system\/missing automake-1.14$/;"	m
AUTOMAKE_OPTIONS	Makefile	/^AUTOMAKE_OPTIONS = subdir-objects$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
AbstractRegistry	src/util/easylogging++.h	/^    AbstractRegistry(AbstractRegistry&& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
AbstractRegistry	src/util/easylogging++.h	/^    AbstractRegistry(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
AbstractRegistry	src/util/easylogging++.h	/^class AbstractRegistry : public base::threading::ThreadSafe {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
Action	src/system/action/Action.h	/^class Action {$/;"	c	namespace:ts::system
ActionBuilder	src/system/action/ActionBuilder.cpp	/^ActionBuilder::ActionBuilder() {$/;"	f	class:ts::system::ActionBuilder
ActionBuilder	src/system/action/ActionBuilder.h	/^class ActionBuilder {$/;"	c	namespace:ts::system
AllowVerboseIfModuleNotSpecified	src/util/easylogging++.h	/^    AllowVerboseIfModuleNotSpecified = 2,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
And	src/util/easylogging++.h	/^static inline base::type::EnumType And(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
AppName	src/util/easylogging++.h	/^    User = 128, Host = 256, LogMessage = 512, VerboseLevel = 1024, AppName = 2048, ThreadId = 4096,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Arc	src/util/Arc.h	/^  Arc() {}$/;"	f	class:ts::Arc
Arc	src/util/Arc.h	/^  Arc(const char* data, size_t size) {$/;"	f	class:ts::Arc
Arc	src/util/Arc.h	/^class Arc {$/;"	c	namespace:ts
BLOCKED	src/system/fragment/FragmentMgr.h	/^      BLOCKED$/;"	e	enum:ts::system::FragmentMgr::State
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCHECK	src/util/easylogging++.h	6134;"	d
CCHECK	src/util/easylogging++.h	6156;"	d
CCHECK_EQ	src/util/easylogging++.h	6136;"	d
CCHECK_EQ	src/util/easylogging++.h	6160;"	d
CCHECK_GE	src/util/easylogging++.h	6141;"	d
CCHECK_GE	src/util/easylogging++.h	6165;"	d
CCHECK_GT	src/util/easylogging++.h	6139;"	d
CCHECK_GT	src/util/easylogging++.h	6163;"	d
CCHECK_LE	src/util/easylogging++.h	6140;"	d
CCHECK_LE	src/util/easylogging++.h	6164;"	d
CCHECK_LT	src/util/easylogging++.h	6138;"	d
CCHECK_LT	src/util/easylogging++.h	6162;"	d
CCHECK_NE	src/util/easylogging++.h	6137;"	d
CCHECK_NE	src/util/easylogging++.h	6161;"	d
CCHECK_NOTNULL	src/util/easylogging++.h	6142;"	d
CCHECK_NOTNULL	src/util/easylogging++.h	6183;"	d
CCHECK_STRCASEEQ	src/util/easylogging++.h	6143;"	d
CCHECK_STRCASEEQ	src/util/easylogging++.h	6188;"	d
CCHECK_STRCASENE	src/util/easylogging++.h	6144;"	d
CCHECK_STRCASENE	src/util/easylogging++.h	6190;"	d
CCHECK_STREQ	src/util/easylogging++.h	6184;"	d
CCHECK_STRNE	src/util/easylogging++.h	6186;"	d
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CDEBUG	src/util/easylogging++.h	5672;"	d
CDEBUG	src/util/easylogging++.h	5717;"	d
CDEBUG_AFTER_N	src/util/easylogging++.h	5693;"	d
CDEBUG_AFTER_N	src/util/easylogging++.h	5842;"	d
CDEBUG_EVERY_N	src/util/easylogging++.h	5686;"	d
CDEBUG_EVERY_N	src/util/easylogging++.h	5799;"	d
CDEBUG_IF	src/util/easylogging++.h	5679;"	d
CDEBUG_IF	src/util/easylogging++.h	5756;"	d
CDEBUG_N_TIMES	src/util/easylogging++.h	5700;"	d
CDEBUG_N_TIMES	src/util/easylogging++.h	5885;"	d
CERROR	src/util/easylogging++.h	5674;"	d
CERROR	src/util/easylogging++.h	5722;"	d
CERROR_AFTER_N	src/util/easylogging++.h	5694;"	d
CERROR_AFTER_N	src/util/easylogging++.h	5848;"	d
CERROR_EVERY_N	src/util/easylogging++.h	5687;"	d
CERROR_EVERY_N	src/util/easylogging++.h	5805;"	d
CERROR_IF	src/util/easylogging++.h	5680;"	d
CERROR_IF	src/util/easylogging++.h	5762;"	d
CERROR_N_TIMES	src/util/easylogging++.h	5701;"	d
CERROR_N_TIMES	src/util/easylogging++.h	5891;"	d
CFATAL	src/util/easylogging++.h	5673;"	d
CFATAL	src/util/easylogging++.h	5727;"	d
CFATAL_AFTER_N	src/util/easylogging++.h	5695;"	d
CFATAL_AFTER_N	src/util/easylogging++.h	5854;"	d
CFATAL_EVERY_N	src/util/easylogging++.h	5688;"	d
CFATAL_EVERY_N	src/util/easylogging++.h	5811;"	d
CFATAL_IF	src/util/easylogging++.h	5681;"	d
CFATAL_IF	src/util/easylogging++.h	5768;"	d
CFATAL_N_TIMES	src/util/easylogging++.h	5702;"	d
CFATAL_N_TIMES	src/util/easylogging++.h	5897;"	d
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CHECK	src/util/easylogging++.h	6145;"	d
CHECK	src/util/easylogging++.h	6158;"	d
CHECK_EQ	src/util/easylogging++.h	6147;"	d
CHECK_EQ	src/util/easylogging++.h	6166;"	d
CHECK_GE	src/util/easylogging++.h	6152;"	d
CHECK_GE	src/util/easylogging++.h	6171;"	d
CHECK_GT	src/util/easylogging++.h	6150;"	d
CHECK_GT	src/util/easylogging++.h	6169;"	d
CHECK_LE	src/util/easylogging++.h	6151;"	d
CHECK_LE	src/util/easylogging++.h	6170;"	d
CHECK_LT	src/util/easylogging++.h	6149;"	d
CHECK_LT	src/util/easylogging++.h	6168;"	d
CHECK_NE	src/util/easylogging++.h	6148;"	d
CHECK_NE	src/util/easylogging++.h	6167;"	d
CHECK_NOTNULL	src/util/easylogging++.h	6153;"	d
CHECK_NOTNULL	src/util/easylogging++.h	6192;"	d
CHECK_STRCASEEQ	src/util/easylogging++.h	6154;"	d
CHECK_STRCASEEQ	src/util/easylogging++.h	6195;"	d
CHECK_STRCASENE	src/util/easylogging++.h	6155;"	d
CHECK_STRCASENE	src/util/easylogging++.h	6196;"	d
CHECK_STREQ	src/util/easylogging++.h	6193;"	d
CHECK_STRNE	src/util/easylogging++.h	6194;"	d
CINFO	src/util/easylogging++.h	5670;"	d
CINFO	src/util/easylogging++.h	5707;"	d
CINFO_AFTER_N	src/util/easylogging++.h	5691;"	d
CINFO_AFTER_N	src/util/easylogging++.h	5830;"	d
CINFO_EVERY_N	src/util/easylogging++.h	5684;"	d
CINFO_EVERY_N	src/util/easylogging++.h	5787;"	d
CINFO_IF	src/util/easylogging++.h	5677;"	d
CINFO_IF	src/util/easylogging++.h	5744;"	d
CINFO_N_TIMES	src/util/easylogging++.h	5698;"	d
CINFO_N_TIMES	src/util/easylogging++.h	5873;"	d
CLOG	src/util/easylogging++.h	5918;"	d
CLOG	src/util/easylogging++.h	5931;"	d
CLOG_AFTER_N	src/util/easylogging++.h	5926;"	d
CLOG_AFTER_N	src/util/easylogging++.h	5944;"	d
CLOG_EVERY_N	src/util/easylogging++.h	5924;"	d
CLOG_EVERY_N	src/util/easylogging++.h	5940;"	d
CLOG_IF	src/util/easylogging++.h	5921;"	d
CLOG_IF	src/util/easylogging++.h	5935;"	d
CLOG_N_TIMES	src/util/easylogging++.h	5928;"	d
CLOG_N_TIMES	src/util/easylogging++.h	5948;"	d
CLOG_VERBOSE	src/util/easylogging++.h	5919;"	d
CLOG_VERBOSE_IF	src/util/easylogging++.h	5922;"	d
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIRM_MOVE_FRAGMENT	src/system/message/MessageMgr.h	/^  CONFIRM_MOVE_FRAGMENT, \/\/\/< Confirming of moving fragment$/;"	e	enum:ts::system::Tag
CPCHECK	src/util/easylogging++.h	6135;"	d
CPCHECK	src/util/easylogging++.h	6157;"	d
CPLOG	src/util/easylogging++.h	5988;"	d
CPLOG	src/util/easylogging++.h	5996;"	d
CPLOG_IF	src/util/easylogging++.h	5989;"	d
CPLOG_IF	src/util/easylogging++.h	5998;"	d
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CSCOPE	Makefile	/^CSCOPE = cscope$/;"	m
CSYSLOG	src/util/easylogging++.h	6009;"	d
CSYSLOG	src/util/easylogging++.h	6030;"	d
CSYSLOG_AFTER_N	src/util/easylogging++.h	6012;"	d
CSYSLOG_AFTER_N	src/util/easylogging++.h	6035;"	d
CSYSLOG_EVERY_N	src/util/easylogging++.h	6011;"	d
CSYSLOG_EVERY_N	src/util/easylogging++.h	6034;"	d
CSYSLOG_IF	src/util/easylogging++.h	6010;"	d
CSYSLOG_IF	src/util/easylogging++.h	6032;"	d
CSYSLOG_N_TIMES	src/util/easylogging++.h	6013;"	d
CSYSLOG_N_TIMES	src/util/easylogging++.h	6036;"	d
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTRACE	src/util/easylogging++.h	5675;"	d
CTRACE	src/util/easylogging++.h	5732;"	d
CTRACE_AFTER_N	src/util/easylogging++.h	5696;"	d
CTRACE_AFTER_N	src/util/easylogging++.h	5860;"	d
CTRACE_EVERY_N	src/util/easylogging++.h	5689;"	d
CTRACE_EVERY_N	src/util/easylogging++.h	5817;"	d
CTRACE_IF	src/util/easylogging++.h	5682;"	d
CTRACE_IF	src/util/easylogging++.h	5774;"	d
CTRACE_N_TIMES	src/util/easylogging++.h	5703;"	d
CTRACE_N_TIMES	src/util/easylogging++.h	5903;"	d
CVERBOSE	src/util/easylogging++.h	5676;"	d
CVERBOSE	src/util/easylogging++.h	5737;"	d
CVERBOSE_AFTER_N	src/util/easylogging++.h	5697;"	d
CVERBOSE_AFTER_N	src/util/easylogging++.h	5866;"	d
CVERBOSE_EVERY_N	src/util/easylogging++.h	5690;"	d
CVERBOSE_EVERY_N	src/util/easylogging++.h	5823;"	d
CVERBOSE_IF	src/util/easylogging++.h	5683;"	d
CVERBOSE_IF	src/util/easylogging++.h	5780;"	d
CVERBOSE_N_TIMES	src/util/easylogging++.h	5704;"	d
CVERBOSE_N_TIMES	src/util/easylogging++.h	5909;"	d
CVLOG	src/util/easylogging++.h	5920;"	d
CVLOG	src/util/easylogging++.h	5933;"	d
CVLOG_AFTER_N	src/util/easylogging++.h	5927;"	d
CVLOG_AFTER_N	src/util/easylogging++.h	5946;"	d
CVLOG_EVERY_N	src/util/easylogging++.h	5925;"	d
CVLOG_EVERY_N	src/util/easylogging++.h	5942;"	d
CVLOG_IF	src/util/easylogging++.h	5923;"	d
CVLOG_IF	src/util/easylogging++.h	5937;"	d
CVLOG_N_TIMES	src/util/easylogging++.h	5929;"	d
CVLOG_N_TIMES	src/util/easylogging++.h	5950;"	d
CWARNING	src/util/easylogging++.h	5671;"	d
CWARNING	src/util/easylogging++.h	5712;"	d
CWARNING_AFTER_N	src/util/easylogging++.h	5692;"	d
CWARNING_AFTER_N	src/util/easylogging++.h	5836;"	d
CWARNING_EVERY_N	src/util/easylogging++.h	5685;"	d
CWARNING_EVERY_N	src/util/easylogging++.h	5793;"	d
CWARNING_IF	src/util/easylogging++.h	5678;"	d
CWARNING_IF	src/util/easylogging++.h	5750;"	d
CWARNING_N_TIMES	src/util/easylogging++.h	5699;"	d
CWARNING_N_TIMES	src/util/easylogging++.h	5879;"	d
CXX	Makefile	/^CXX = mpic++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = mpic++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -O0 -g -pg -DNDEBUG -std=c++0x -Wall -Werror  $/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
Callback	src/util/easylogging++.h	/^    Callback(void) : m_enabled(true) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Callback
Callback	src/util/easylogging++.h	/^class Callback : protected base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Checkpoint	src/util/easylogging++.h	/^        Checkpoint = 1, Complete = 2$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
ColoredTerminalOutput	src/util/easylogging++.h	/^    ColoredTerminalOutput = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
Comm	src/system/message/comm/Comm.cpp	/^Comm::Comm(int* argc, char ***argv, const int& mode) : max_request_id(0) {$/;"	f	class:ts::system::Comm
Comm	src/system/message/comm/Comm.h	/^class Comm {$/;"	c	namespace:ts::system
CommandLineArgs	src/util/easylogging++.h	/^    CommandLineArgs(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
CommandLineArgs	src/util/easylogging++.h	/^    CommandLineArgs(int argc, const char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
CommandLineArgs	src/util/easylogging++.h	/^    CommandLineArgs(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
CommandLineArgs	src/util/easylogging++.h	/^class CommandLineArgs {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
Complete	src/util/easylogging++.h	/^        Checkpoint = 1, Complete = 2$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
Configuration	src/util/easylogging++.h	/^    Configuration(Level level, ConfigurationType configurationType, const std::string& value) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
Configuration	src/util/easylogging++.h	/^    Configuration(const Configuration& c) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
Configuration	src/util/easylogging++.h	/^class Configuration : public Loggable {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
ConfigurationType	src/util/easylogging++.h	/^enum class ConfigurationType : base::type::EnumType {$/;"	c	class:el::Level
ConfigurationTypeHelper	src/util/easylogging++.h	/^class ConfigurationTypeHelper : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType
Configurations	src/util/easylogging++.h	/^    Configurations(const std::string& configurationFile, bool useDefaultsForRemaining = true, Configurations* base = nullptr) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
Configurations	src/util/easylogging++.h	/^    Configurations(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
Configurations	src/util/easylogging++.h	/^class Configurations : public base::utils::RegistryWithPred<Configuration, Configuration::Predicate> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
ConfirmMove	src/system/action/actions/ConfirmMove.h	/^  ConfirmMove() {}$/;"	f	class:ts::system::action::ConfirmMove
ConfirmMove	src/system/action/actions/ConfirmMove.h	/^class ConfirmMove : public ts::system::Action {$/;"	c	namespace:ts::system::action
CrashHandler	src/util/easylogging++.h	/^    explicit CrashHandler(bool useDefault) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
CrashHandler	src/util/easylogging++.h	/^    explicit CrashHandler(const Handler& cHandler) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
CrashHandler	src/util/easylogging++.h	/^class CrashHandler : base::NoCopy {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
CreateLoggerAutomatically	src/util/easylogging++.h	/^    CreateLoggerAutomatically = 4096$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
CreateProcess	libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CustomFormatSpecifier	src/util/easylogging++.h	/^    CustomFormatSpecifier(const char* formatSpecifier, const FormatSpecifierValueResolver& resolver) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
CustomFormatSpecifier	src/util/easylogging++.h	/^class CustomFormatSpecifier {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
DCCHECK	src/util/easylogging++.h	6197;"	d
DCCHECK	src/util/easylogging++.h	6219;"	d
DCCHECK_EQ	src/util/easylogging++.h	6198;"	d
DCCHECK_EQ	src/util/easylogging++.h	6220;"	d
DCCHECK_GE	src/util/easylogging++.h	6203;"	d
DCCHECK_GE	src/util/easylogging++.h	6225;"	d
DCCHECK_GT	src/util/easylogging++.h	6201;"	d
DCCHECK_GT	src/util/easylogging++.h	6223;"	d
DCCHECK_LE	src/util/easylogging++.h	6202;"	d
DCCHECK_LE	src/util/easylogging++.h	6224;"	d
DCCHECK_LT	src/util/easylogging++.h	6200;"	d
DCCHECK_LT	src/util/easylogging++.h	6222;"	d
DCCHECK_NE	src/util/easylogging++.h	6199;"	d
DCCHECK_NE	src/util/easylogging++.h	6221;"	d
DCCHECK_NOTNULL	src/util/easylogging++.h	6204;"	d
DCCHECK_NOTNULL	src/util/easylogging++.h	6226;"	d
DCCHECK_STRCASEEQ	src/util/easylogging++.h	6205;"	d
DCCHECK_STRCASEEQ	src/util/easylogging++.h	6229;"	d
DCCHECK_STRCASENE	src/util/easylogging++.h	6206;"	d
DCCHECK_STRCASENE	src/util/easylogging++.h	6230;"	d
DCCHECK_STREQ	src/util/easylogging++.h	6227;"	d
DCCHECK_STRNE	src/util/easylogging++.h	6228;"	d
DCHECK	src/util/easylogging++.h	6208;"	d
DCHECK	src/util/easylogging++.h	6232;"	d
DCHECK_EQ	src/util/easylogging++.h	6209;"	d
DCHECK_EQ	src/util/easylogging++.h	6233;"	d
DCHECK_GE	src/util/easylogging++.h	6214;"	d
DCHECK_GE	src/util/easylogging++.h	6238;"	d
DCHECK_GT	src/util/easylogging++.h	6212;"	d
DCHECK_GT	src/util/easylogging++.h	6236;"	d
DCHECK_LE	src/util/easylogging++.h	6213;"	d
DCHECK_LE	src/util/easylogging++.h	6237;"	d
DCHECK_LT	src/util/easylogging++.h	6211;"	d
DCHECK_LT	src/util/easylogging++.h	6235;"	d
DCHECK_NE	src/util/easylogging++.h	6210;"	d
DCHECK_NE	src/util/easylogging++.h	6234;"	d
DCHECK_NOTNULL	src/util/easylogging++.h	6215;"	d
DCHECK_NOTNULL	src/util/easylogging++.h	6239;"	d
DCHECK_STRCASEEQ	src/util/easylogging++.h	6216;"	d
DCHECK_STRCASEEQ	src/util/easylogging++.h	6242;"	d
DCHECK_STRCASENE	src/util/easylogging++.h	6217;"	d
DCHECK_STRCASENE	src/util/easylogging++.h	6243;"	d
DCHECK_STREQ	src/util/easylogging++.h	6240;"	d
DCHECK_STRNE	src/util/easylogging++.h	6241;"	d
DCLOG	src/util/easylogging++.h	6082;"	d
DCLOG	src/util/easylogging++.h	6093;"	d
DCLOG_AFTER_N	src/util/easylogging++.h	6088;"	d
DCLOG_AFTER_N	src/util/easylogging++.h	6102;"	d
DCLOG_EVERY_N	src/util/easylogging++.h	6086;"	d
DCLOG_EVERY_N	src/util/easylogging++.h	6100;"	d
DCLOG_IF	src/util/easylogging++.h	6084;"	d
DCLOG_IF	src/util/easylogging++.h	6097;"	d
DCLOG_N_TIMES	src/util/easylogging++.h	6090;"	d
DCLOG_N_TIMES	src/util/easylogging++.h	6104;"	d
DCLOG_VERBOSE	src/util/easylogging++.h	6094;"	d
DCPCHECK	src/util/easylogging++.h	6207;"	d
DCPCHECK	src/util/easylogging++.h	6231;"	d
DCPLOG	src/util/easylogging++.h	5992;"	d
DCPLOG	src/util/easylogging++.h	6000;"	d
DCPLOG_IF	src/util/easylogging++.h	5993;"	d
DCPLOG_IF	src/util/easylogging++.h	6002;"	d
DCSYSLOG	src/util/easylogging++.h	6019;"	d
DCSYSLOG	src/util/easylogging++.h	6042;"	d
DCSYSLOG_AFTER_N	src/util/easylogging++.h	6022;"	d
DCSYSLOG_AFTER_N	src/util/easylogging++.h	6047;"	d
DCSYSLOG_EVERY_N	src/util/easylogging++.h	6021;"	d
DCSYSLOG_EVERY_N	src/util/easylogging++.h	6045;"	d
DCSYSLOG_IF	src/util/easylogging++.h	6020;"	d
DCSYSLOG_IF	src/util/easylogging++.h	6043;"	d
DCSYSLOG_N_TIMES	src/util/easylogging++.h	6023;"	d
DCSYSLOG_N_TIMES	src/util/easylogging++.h	6049;"	d
DCVLOG	src/util/easylogging++.h	6083;"	d
DCVLOG	src/util/easylogging++.h	6095;"	d
DCVLOG_AFTER_N	src/util/easylogging++.h	6089;"	d
DCVLOG_AFTER_N	src/util/easylogging++.h	6103;"	d
DCVLOG_EVERY_N	src/util/easylogging++.h	6087;"	d
DCVLOG_EVERY_N	src/util/easylogging++.h	6101;"	d
DCVLOG_IF	src/util/easylogging++.h	6085;"	d
DCVLOG_IF	src/util/easylogging++.h	6098;"	d
DCVLOG_N_TIMES	src/util/easylogging++.h	6091;"	d
DCVLOG_N_TIMES	src/util/easylogging++.h	6105;"	d
DEBUG	src/util/easylogging++.h	5664;"	d
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFS	Makefile	/^DEFS = -DPACKAGE_NAME=\\"ts\\" -DPACKAGE_TARNAME=\\"ts\\" -DPACKAGE_VERSION=\\"0.1\\" -DPACKAGE_STRING=\\"ts\\ 0.1\\" -DPACKAGE_BUGREPORT=\\"ilya.sumb@gmail.com\\" -DPACKAGE_URL=\\"\\" -DPACKAGE=\\"ts\\" -DVERSION=\\"0.1\\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\\".libs\/\\" -DHAVE_PTHREAD_PRIO_INHERIT=1 -DHAVE_PTHREAD=1 -DHAVE_MPI=1$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(libts_la_SOURCES)$/;"	m
DIST_TARGETS	Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DLOG	src/util/easylogging++.h	6110;"	d
DLOG	src/util/easylogging++.h	6121;"	d
DLOG_AFTER_N	src/util/easylogging++.h	6116;"	d
DLOG_AFTER_N	src/util/easylogging++.h	6129;"	d
DLOG_EVERY_N	src/util/easylogging++.h	6114;"	d
DLOG_EVERY_N	src/util/easylogging++.h	6127;"	d
DLOG_IF	src/util/easylogging++.h	6112;"	d
DLOG_IF	src/util/easylogging++.h	6124;"	d
DLOG_N_TIMES	src/util/easylogging++.h	6118;"	d
DLOG_N_TIMES	src/util/easylogging++.h	6131;"	d
DPCHECK	src/util/easylogging++.h	6218;"	d
DPCHECK	src/util/easylogging++.h	6244;"	d
DPLOG	src/util/easylogging++.h	5994;"	d
DPLOG	src/util/easylogging++.h	6006;"	d
DPLOG_IF	src/util/easylogging++.h	5995;"	d
DPLOG_IF	src/util/easylogging++.h	6007;"	d
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DSYSLOG	src/util/easylogging++.h	6024;"	d
DSYSLOG	src/util/easylogging++.h	6051;"	d
DSYSLOG_AFTER_N	src/util/easylogging++.h	6027;"	d
DSYSLOG_AFTER_N	src/util/easylogging++.h	6054;"	d
DSYSLOG_EVERY_N	src/util/easylogging++.h	6026;"	d
DSYSLOG_EVERY_N	src/util/easylogging++.h	6053;"	d
DSYSLOG_IF	src/util/easylogging++.h	6025;"	d
DSYSLOG_IF	src/util/easylogging++.h	6052;"	d
DSYSLOG_N_TIMES	src/util/easylogging++.h	6028;"	d
DSYSLOG_N_TIMES	src/util/easylogging++.h	6055;"	d
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
DVLOG	src/util/easylogging++.h	6111;"	d
DVLOG	src/util/easylogging++.h	6122;"	d
DVLOG_AFTER_N	src/util/easylogging++.h	6117;"	d
DVLOG_AFTER_N	src/util/easylogging++.h	6130;"	d
DVLOG_EVERY_N	src/util/easylogging++.h	6115;"	d
DVLOG_EVERY_N	src/util/easylogging++.h	6128;"	d
DVLOG_IF	src/util/easylogging++.h	6113;"	d
DVLOG_IF	src/util/easylogging++.h	6125;"	d
DVLOG_N_TIMES	src/util/easylogging++.h	6119;"	d
DVLOG_N_TIMES	src/util/easylogging++.h	6132;"	d
DataType	src/util/easylogging++.h	/^    enum class DataType : base::type::EnumType {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData
DateTime	src/util/easylogging++.h	/^    DateTime = 2, LoggerId = 4, File = 8, Line = 16, Location = 32, Function = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
DateTime	src/util/easylogging++.h	/^class DateTime : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
Day	src/util/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Debug	src/util/easylogging++.h	/^        Debug = 4,$/;"	m	class:el::Level
DefaultLogBuilder	src/util/easylogging++.h	/^class DefaultLogBuilder : public LogBuilder {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base
DefaultLogDispatchCallback	src/util/easylogging++.h	/^class DefaultLogDispatchCallback : public LogDispatchCallback {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
DefaultPerformanceTrackingCallback	src/util/easylogging++.h	/^class DefaultPerformanceTrackingCallback : public PerformanceTrackingCallback {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTracker
DisableApplicationAbortOnFatalLog	src/util/easylogging++.h	/^    DisableApplicationAbortOnFatalLog = 8,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisablePerformanceTrackingCheckpointComparison	src/util/easylogging++.h	/^    DisablePerformanceTrackingCheckpointComparison = 256,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisableVModules	src/util/easylogging++.h	/^    DisableVModules = 512,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisableVModulesExtensions	src/util/easylogging++.h	/^    DisableVModulesExtensions = 1024,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DispatchAction	src/util/easylogging++.h	/^enum class DispatchAction : base::type::EnumType {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Distributor	src/distr/Distributor.h	/^class Distributor {$/;"	c	namespace:ts::distr
EASYLOGGINGPP_H	src/util/easylogging++.h	15;"	d
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
ELPP	src/util/easylogging++.h	3977;"	d
ELPP_ASSERT	src/util/easylogging++.h	107;"	d
ELPP_ASSERT	src/util/easylogging++.h	114;"	d
ELPP_ASSERT	src/util/easylogging++.h	122;"	d
ELPP_COUNTER	src/util/easylogging++.h	5655;"	d
ELPP_COUNTER	src/util/easylogging++.h	5658;"	d
ELPP_COUNTER_POS	src/util/easylogging++.h	5656;"	d
ELPP_COUNTER_POS	src/util/easylogging++.h	5660;"	d
ELPP_COUT	src/util/easylogging++.h	411;"	d
ELPP_COUT	src/util/easylogging++.h	416;"	d
ELPP_COUT_LINE	src/util/easylogging++.h	440;"	d
ELPP_COUT_LINE	src/util/easylogging++.h	442;"	d
ELPP_FINAL	src/util/easylogging++.h	205;"	d
ELPP_FINAL	src/util/easylogging++.h	207;"	d
ELPP_FINAL	src/util/easylogging++.h	209;"	d
ELPP_INTERNAL_ERROR	src/util/easylogging++.h	134;"	d
ELPP_INTERNAL_ERROR	src/util/easylogging++.h	143;"	d
ELPP_INTERNAL_INFO	src/util/easylogging++.h	142;"	d
ELPP_INTERNAL_INFO	src/util/easylogging++.h	150;"	d
ELPP_INTERNAL_INFO	src/util/easylogging++.h	156;"	d
ELPP_INTERNAL_INFO	src/util/easylogging++.h	157;"	d
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	src/util/easylogging++.h	4308;"	d
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	src/util/easylogging++.h	4534;"	d
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	src/util/easylogging++.h	4303;"	d
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	src/util/easylogging++.h	4533;"	d
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	src/util/easylogging++.h	4288;"	d
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	src/util/easylogging++.h	4530;"	d
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	src/util/easylogging++.h	4298;"	d
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	src/util/easylogging++.h	4532;"	d
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	src/util/easylogging++.h	4293;"	d
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	src/util/easylogging++.h	4531;"	d
ELPP_LITERAL	src/util/easylogging++.h	409;"	d
ELPP_LITERAL	src/util/easylogging++.h	413;"	d
ELPP_SIMPLE_LOG	src/util/easylogging++.h	4242;"	d
ELPP_SIMPLE_LOG	src/util/easylogging++.h	4529;"	d
ELPP_STRLEN	src/util/easylogging++.h	410;"	d
ELPP_STRLEN	src/util/easylogging++.h	414;"	d
ELPP_VARIADIC_FUNC_MSVC	src/util/easylogging++.h	4870;"	d
ELPP_VARIADIC_FUNC_MSVC_RUN	src/util/easylogging++.h	4871;"	d
ELPP_WX_ENABLED	src/util/easylogging++.h	4518;"	d
ELPP_WX_HASH_MAP_ENABLED	src/util/easylogging++.h	4519;"	d
ELPP_WX_PTR_ENABLED	src/util/easylogging++.h	4517;"	d
ERDListener	src/system/exec/ExecMgr.h	/^  Listener ERDListener; \/\/\/< External reduce data listener$/;"	m	class:ts::system::ExecMgr
ERROR	src/util/easylogging++.h	5665;"	d
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEC	src/system/fragment/FragmentMgr.h	/^      EXEC,$/;"	e	enum:ts::system::FragmentMgr::State
EXEEXT	Makefile	/^EXEEXT = $/;"	m
Enabled	src/util/easylogging++.h	/^    Enabled = 1,$/;"	m	class:el::Level::ConfigurationType
EnumType	src/util/easylogging++.h	/^typedef unsigned short EnumType;  \/\/ NOLINT$/;"	t	namespace:el::base::type
Error	src/util/easylogging++.h	/^        Error = 16,$/;"	m	class:el::Level
ExecMgr	src/system/exec/ExecMgr.h	/^  ExecMgr(ts::type::ReduceDataTools* _reduceTools): externalReduceData(0),$/;"	f	class:ts::system::ExecMgr
ExecMgr	src/system/exec/ExecMgr.h	/^class ExecMgr {$/;"	c	namespace:ts::system
FATAL	src/util/easylogging++.h	5666;"	d
FGREP	Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FREE	src/system/fragment/FragmentMgr.h	/^      FREE,$/;"	e	enum:ts::system::FragmentMgr::State
Fatal	src/util/easylogging++.h	/^        Fatal = 8, $/;"	m	class:el::Level
File	src/util/easylogging++.h	/^    DateTime = 2, LoggerId = 4, File = 8, Line = 16, Location = 32, Function = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
File	src/util/easylogging++.h	/^class File : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
FileStreamPtr	src/util/easylogging++.h	/^typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Filename	src/util/easylogging++.h	/^    Filename = 16,$/;"	m	class:el::Level::ConfigurationType
Format	src/util/easylogging++.h	/^    Format = 8,$/;"	m	class:el::Level::ConfigurationType
FormatFlags	src/util/easylogging++.h	/^enum class FormatFlags : base::type::EnumType {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
FormatSpecifierValueResolver	src/util/easylogging++.h	/^typedef std::function<const char*(void)> FormatSpecifierValueResolver;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
Fragment	src/types/Fragment.cpp	/^Fragment::Fragment(ID id) {$/;"	f	class:ts::type::Fragment
Fragment	src/types/Fragment.h	/^class Fragment {$/;"	c	namespace:ts::type
Fragment	tests/fragment.h	/^  Fragment(ts::type::ID id, bool needFile = true): ts::type::Fragment(id) {$/;"	f	class:Fragment
Fragment	tests/fragment.h	/^class Fragment: public ts::type::Fragment {$/;"	c
FragmentDeserializer	src/types/util/FragmentDeserializer.h	/^class FragmentDeserializer {$/;"	c	namespace:ts::type::util
FragmentMgr	src/system/fragment/FragmentMgr.cpp	/^FragmentMgr::FragmentMgr() {$/;"	f	class:ts::system::FragmentMgr
FragmentMgr	src/system/fragment/FragmentMgr.cpp	/^FragmentMgr::FragmentMgr(MessageMgr* msgMgr):$/;"	f	class:ts::system::FragmentMgr
FragmentMgr	src/system/fragment/FragmentMgr.h	/^  class FragmentMgr {$/;"	c	namespace:ts::system
FragmentSerializer	src/types/util/FragmentSerializer.h	/^class FragmentSerializer {$/;"	c	namespace:ts::type::util
FragmentTools	src/types/FragmentTools.h	/^class FragmentTools {$/;"	c	namespace:ts::type
FragmentTools	tests/fragment.h	/^class FragmentTools: public ts::type::FragmentTools {$/;"	c
Function	src/util/easylogging++.h	/^    DateTime = 2, LoggerId = 4, File = 8, Line = 16, Location = 32, Function = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
GLOBAL_REDUCING	src/system/exec/ExecMgr.h	/^  enum ReduceState { LOCAL_REDUCING, PRE_GLOBAL_REDUCING, GLOBAL_REDUCING };$/;"	e	enum:ts::system::ExecMgr::ReduceState
GREP	Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
Global	src/util/easylogging++.h	/^        Global = 1,$/;"	m	class:el::Level
HEADERS	Makefile	/^HEADERS = $(tssystem_HEADERS) $(tssystemaction_HEADERS) \\$/;"	m
Handler	src/util/easylogging++.h	/^    typedef void (*Handler)(int);$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
Helpers	src/util/easylogging++.h	/^class Helpers : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base
HierarchicalLogging	src/util/easylogging++.h	/^    HierarchicalLogging = 2048,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
HitCounter	src/util/easylogging++.h	/^    HitCounter(const HitCounter& hitCounter) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
HitCounter	src/util/easylogging++.h	/^    HitCounter(const char* filename, unsigned long int lineNumber) :  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
HitCounter	src/util/easylogging++.h	/^    HitCounter(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
HitCounter	src/util/easylogging++.h	/^class HitCounter {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Host	src/util/easylogging++.h	/^    User = 128, Host = 256, LogMessage = 512, VerboseLevel = 1024, AppName = 2048, ThreadId = 4096,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Hour	src/util/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
ID	src/types/ID.cpp	/^ID::ID(uint64_t x, uint64_t y, uint64_t z) {$/;"	f	class:ts::type::ID
ID	src/types/ID.h	/^struct ID {$/;"	s	namespace:ts::type
INFO	src/util/easylogging++.h	5662;"	d
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
ImmediateFlush	src/util/easylogging++.h	/^    ImmediateFlush = 16,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
Info	src/util/easylogging++.h	/^        Info = 128, $/;"	m	class:el::Level
IterableContainer	src/util/easylogging++.h	/^    IterableContainer(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableContainer
IterableContainer	src/util/easylogging++.h	/^class IterableContainer {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds
IterablePriorityQueue	src/util/easylogging++.h	/^    IterablePriorityQueue(std::priority_queue<T, Container, Comparator> queue_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterablePriorityQueue
IterablePriorityQueue	src/util/easylogging++.h	/^class IterablePriorityQueue : public IterableContainer<T, Container>, public std::priority_queue<T, Container, Comparator> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds
IterableQueue	src/util/easylogging++.h	/^    IterableQueue(std::queue<T, Container> queue_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableQueue
IterableQueue	src/util/easylogging++.h	/^class IterableQueue : public IterableContainer<T, Container>, public std::queue<T, Container> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds
IterableStack	src/util/easylogging++.h	/^    IterableStack(std::stack<T, Container> stack_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableStack
IterableStack	src/util/easylogging++.h	/^class IterableStack : public IterableContainer<T, Container>, public std::stack<T, Container> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = -lpthread $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LOCAL_REDUCING	src/system/exec/ExecMgr.h	/^  enum ReduceState { LOCAL_REDUCING, PRE_GLOBAL_REDUCING, GLOBAL_REDUCING };$/;"	e	enum:ts::system::ExecMgr::ReduceState
LOG	src/util/easylogging++.h	5956;"	d
LOG	src/util/easylogging++.h	5975;"	d
LOGGER_LEVEL_WRITERS	src/util/easylogging++.h	4817;"	d
LOGGER_LEVEL_WRITERS	src/util/easylogging++.h	4866;"	d
LOGGER_LEVEL_WRITERS_DISABLED	src/util/easylogging++.h	4826;"	d
LOGGER_LEVEL_WRITERS_DISABLED	src/util/easylogging++.h	4867;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	src/util/easylogging++.h	3414;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	src/util/easylogging++.h	3432;"	d
LOG_AFTER_N	src/util/easylogging++.h	5962;"	d
LOG_AFTER_N	src/util/easylogging++.h	5983;"	d
LOG_EVERY_N	src/util/easylogging++.h	5960;"	d
LOG_EVERY_N	src/util/easylogging++.h	5981;"	d
LOG_IF	src/util/easylogging++.h	5958;"	d
LOG_IF	src/util/easylogging++.h	5978;"	d
LOG_N_TIMES	src/util/easylogging++.h	5964;"	d
LOG_N_TIMES	src/util/easylogging++.h	5985;"	d
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
Level	src/util/easylogging++.h	/^    Level = 8192$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Level	src/util/easylogging++.h	/^enum class Level : base::type::EnumType {$/;"	c	namespace:el
LevelHelper	src/util/easylogging++.h	/^class LevelHelper : base::StaticClass {$/;"	c	class:el::Level
Line	src/util/easylogging++.h	/^    DateTime = 2, LoggerId = 4, File = 8, Line = 16, Location = 32, Function = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Listener	src/system/util/Listener.cpp	/^ts::system::Listener::Listener(bool begin) {$/;"	f	class:ts::system::Listener
Listener	src/system/util/Listener.h	/^struct Listener {$/;"	s	namespace:ts::system
Location	src/util/easylogging++.h	/^    DateTime = 2, LoggerId = 4, File = 8, Line = 16, Location = 32, Function = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
LogBuilder	src/util/easylogging++.h	/^class LogBuilder : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogBuilderPtr	src/util/easylogging++.h	/^typedef std::shared_ptr<LogBuilder> LogBuilderPtr;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogDetailedCrashReason	src/util/easylogging++.h	/^    LogDetailedCrashReason = 4,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
LogDispatchCallback	src/util/easylogging++.h	/^class LogDispatchCallback : public Callback<LogDispatchData> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogDispatchCallbackPtr	src/util/easylogging++.h	/^typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;$/;"	t	namespace:el::base::type
LogDispatchData	src/util/easylogging++.h	/^    LogDispatchData() : m_logMessage(nullptr), m_dispatchAction(base::DispatchAction::None) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
LogDispatchData	src/util/easylogging++.h	/^class LogDispatchData {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogDispatcher	src/util/easylogging++.h	/^    LogDispatcher(bool proceed, LogMessage&& logMessage, base::DispatchAction dispatchAction) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::LogDispatcher
LogDispatcher	src/util/easylogging++.h	/^class LogDispatcher : base::NoCopy {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder
LogFlushThreshold	src/util/easylogging++.h	/^    LogFlushThreshold = 256,$/;"	m	class:el::Level::ConfigurationType
LogFormat	src/util/easylogging++.h	/^    LogFormat(Level level, const base::type::string_t& format)$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
LogFormat	src/util/easylogging++.h	/^    LogFormat(LogFormat&& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
LogFormat	src/util/easylogging++.h	/^    LogFormat(const LogFormat& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
LogFormat	src/util/easylogging++.h	/^    LogFormat(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
LogFormat	src/util/easylogging++.h	/^class LogFormat : public Loggable {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogMessage	src/util/easylogging++.h	/^    LogMessage(Level level, const std::string& file, unsigned long int line, const std::string& func,  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
LogMessage	src/util/easylogging++.h	/^    User = 128, Host = 256, LogMessage = 512, VerboseLevel = 1024, AppName = 2048, ThreadId = 4096,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
LogMessage	src/util/easylogging++.h	/^class LogMessage {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogStreamsReferenceMap	src/util/easylogging++.h	/^typedef std::map<std::string, FileStreamPtr> LogStreamsReferenceMap;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Loggable	src/util/easylogging++.h	/^class Loggable {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
Logger	src/util/easylogging++.h	/^    Logger(const Logger& logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
Logger	src/util/easylogging++.h	/^    Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
Logger	src/util/easylogging++.h	/^    Logger(const std::string& id, const Configurations& configurations, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
Logger	src/util/easylogging++.h	/^class Logger : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LoggerId	src/util/easylogging++.h	/^    DateTime = 2, LoggerId = 4, File = 8, Line = 16, Location = 32, Function = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Loggers	src/util/easylogging++.h	/^class Loggers : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base
LoggingFlag	src/util/easylogging++.h	/^enum class LoggingFlag : base::type::EnumType {$/;"	c	class:el::Level::ConfigurationType
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/yoba\/code\/testing-system\/missing makeinfo$/;"	m
MAKE_CONTAINER_ELPP_FRIENDLY	src/util/easylogging++.h	4497;"	d
MAKE_LOGGABLE	src/util/easylogging++.h	5280;"	d
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MKDIR_P	Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MOVE	src/system/fragment/FragmentMgr.h	/^      MOVE,$/;"	e	enum:ts::system::FragmentMgr::State
MOVE_FRAGMENT	src/system/message/MessageMgr.h	/^  MOVE_FRAGMENT          \/\/\/< Moving fragment$/;"	e	enum:ts::system::Tag
MPICC	Makefile	/^MPICC = mpicc$/;"	m
MPILIBS	Makefile	/^MPILIBS =  $/;"	m
MaxLogFileSize	src/util/easylogging++.h	/^    MaxLogFileSize = 128,$/;"	m	class:el::Level::ConfigurationType
Message	src/system/message/MessageMgr.h	/^  Message() {$/;"	f	struct:ts::system::Message
Message	src/system/message/MessageMgr.h	/^struct Message {$/;"	s	namespace:ts::system
MessageBuilder	src/util/easylogging++.h	/^    MessageBuilder(void) : m_logger(nullptr), m_containerLogSeperator(ELPP_LITERAL("")) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
MessageBuilder	src/util/easylogging++.h	/^class MessageBuilder {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder
MessageMgr	src/system/message/MessageMgr.cpp	/^MessageMgr::MessageMgr(): end(false) {$/;"	f	class:ts::system::MessageMgr
MessageMgr	src/system/message/MessageMgr.h	/^class MessageMgr {$/;"	c	namespace:ts::system
Microsecond	src/util/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Millisecond	src/util/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
MillisecondsWidth	src/util/easylogging++.h	/^    MillisecondsWidth = 32,$/;"	m	class:el::Level::ConfigurationType
MillisecondsWidth	src/util/easylogging++.h	/^    MillisecondsWidth(void) { init(base::consts::kDefaultMillisecondsWidth); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
MillisecondsWidth	src/util/easylogging++.h	/^    explicit MillisecondsWidth(int width) { init(width); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
MillisecondsWidth	src/util/easylogging++.h	/^class MillisecondsWidth {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Minute	src/util/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Move	src/system/action/actions/Move.h	/^  Move() {}$/;"	f	class:ts::system::action::Move
Move	src/system/action/actions/Move.h	/^class Move : public ts::system::Action {$/;"	c	namespace:ts::system::action
MultiLoggerSupport	src/util/easylogging++.h	/^    MultiLoggerSupport = 128,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
Mutex	src/util/easylogging++.h	/^    Mutex(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
Mutex	src/util/easylogging++.h	/^class Mutex {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal
Mutex	src/util/easylogging++.h	/^typedef base::threading::internal::Mutex Mutex;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NewLineForContainer	src/util/easylogging++.h	/^    NewLineForContainer = 1,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
NoCopy	src/util/easylogging++.h	/^    NoCopy(void) {}$/;"	f	class:el::base::NoCopy
NoCopy	src/util/easylogging++.h	/^class NoCopy {$/;"	c	namespace:el::base
NodeID	src/system/message/NodeID.h	/^typedef int NodeID;$/;"	t
NodeID	src/types/Fragment.cpp	/^typedef int NodeID;$/;"	t	namespace:ts::type	file:
NodeID	src/types/Fragment.h	/^typedef int NodeID;$/;"	t	namespace:ts::type
None	src/util/easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::DispatchAction
NormalLog	src/util/easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::DispatchAction
Not	src/util/easylogging++.h	/^static inline base::type::EnumType Not(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
NullWriter	src/util/easylogging++.h	/^    NullWriter(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::NullWriter
NullWriter	src/util/easylogging++.h	/^class NullWriter : base::NoCopy {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OS	src/util/easylogging++.h	/^class OS : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
OStreamMani	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(std::ostream& (*OStreamMani)(std::ostream&)) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
Or	src/util/easylogging++.h	/^static inline base::type::EnumType Or(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
PACKAGE	Makefile	/^PACKAGE = ts$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = ilya.sumb@gmail.com$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = ts$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = ts 0.1$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = ts$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 0.1$/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PCHECK	src/util/easylogging++.h	6146;"	d
PCHECK	src/util/easylogging++.h	6159;"	d
PERFORMANCE_CHECKPOINT	src/util/easylogging++.h	5651;"	d
PERFORMANCE_CHECKPOINT	src/util/easylogging++.h	5653;"	d
PERFORMANCE_CHECKPOINT_WITH_ID	src/util/easylogging++.h	5652;"	d
PERFORMANCE_CHECKPOINT_WITH_ID	src/util/easylogging++.h	5654;"	d
PErrorWriter	src/util/easylogging++.h	/^    PErrorWriter(Level level, const char* file, unsigned long int line,  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Writer::PErrorWriter
PErrorWriter	src/util/easylogging++.h	/^class PErrorWriter : public base::Writer {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Writer
PLOG	src/util/easylogging++.h	5990;"	d
PLOG	src/util/easylogging++.h	6004;"	d
PLOG_IF	src/util/easylogging++.h	5991;"	d
PLOG_IF	src/util/easylogging++.h	6005;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_GLOBAL_REDUCING	src/system/exec/ExecMgr.h	/^  enum ReduceState { LOCAL_REDUCING, PRE_GLOBAL_REDUCING, GLOBAL_REDUCING };$/;"	e	enum:ts::system::ExecMgr::ReduceState
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PTHREAD_CC	Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	Makefile	/^PTHREAD_CFLAGS = $/;"	m
PTHREAD_LIBS	Makefile	/^PTHREAD_LIBS = -lpthread$/;"	m
Parser	src/util/easylogging++.h	/^    class Parser : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
PerformanceTracker	src/util/easylogging++.h	/^    PerformanceTracker(const std::string& blockName,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTracker
PerformanceTracker	src/util/easylogging++.h	/^class PerformanceTracker : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base
PerformanceTracking	src/util/easylogging++.h	/^    PerformanceTracking = 64,$/;"	m	class:el::Level::ConfigurationType
PerformanceTrackingCallback	src/util/easylogging++.h	/^class PerformanceTrackingCallback : public Callback<PerformanceTrackingData> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
PerformanceTrackingCallbackPtr	src/util/easylogging++.h	/^typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;$/;"	t	namespace:el::base::type
PerformanceTrackingData	src/util/easylogging++.h	/^    explicit PerformanceTrackingData(DataType dataType) : m_performanceTracker(nullptr), m_dataType(dataType) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
PerformanceTrackingData	src/util/easylogging++.h	/^class PerformanceTrackingData {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder
PreRollOutCallback	src/util/easylogging++.h	/^typedef std::function<void(const char*, std::size_t)> PreRollOutCallback;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag
Predicate	src/util/easylogging++.h	/^        Predicate(Level level, ConfigurationType configurationType) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration::Predicate
Predicate	src/util/easylogging++.h	/^        Predicate(const char* filename, unsigned long int lineNumber)  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter::Predicate
Predicate	src/util/easylogging++.h	/^    class Predicate {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
Predicate	src/util/easylogging++.h	/^    class Predicate {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
REDUCE_DATA	src/system/message/MessageMgr.h	/^  REDUCE_DATA,       \/\/\/< Partial reduce data$/;"	e	enum:ts::system::Tag
RWLock	src/util/RWLock.cpp	/^RWLock::RWLock() {$/;"	f	class:ts::RWLock
RWLock	src/util/RWLock.h	/^class RWLock {$/;"	c	namespace:ts
Reduce	src/system/action/actions/Reduce.h	/^class Reduce : public ts::system::Action {$/;"	c	namespace:ts::system::action
ReduceData	src/types/ReduceData.h	/^class ReduceData {$/;"	c	namespace:ts::type
ReduceData	tests/fragment.h	/^  ReduceData(char _n) {$/;"	f	class:ReduceData
ReduceData	tests/fragment.h	/^class ReduceData: public ts::type::ReduceData {$/;"	c
ReduceDataTools	src/types/ReduceDataTools.h	/^class ReduceDataTools {$/;"	c	namespace:ts::type
ReduceDataTools	tests/fragment.h	/^class ReduceDataTools: public ts::type::ReduceDataTools {$/;"	c
ReduceState	src/system/exec/ExecMgr.h	/^  enum ReduceState { LOCAL_REDUCING, PRE_GLOBAL_REDUCING, GLOBAL_REDUCING };$/;"	g	class:ts::system::ExecMgr
RegisteredHitCounters	src/util/easylogging++.h	/^class RegisteredHitCounters : public base::utils::RegistryWithPred<base::HitCounter, base::HitCounter::Predicate> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
RegisteredLoggers	src/util/easylogging++.h	/^    explicit RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
RegisteredLoggers	src/util/easylogging++.h	/^class RegisteredLoggers : public base::utils::Registry<Logger, std::string> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
Registry	src/util/easylogging++.h	/^    Registry(const Registry& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
Registry	src/util/easylogging++.h	/^    Registry(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
Registry	src/util/easylogging++.h	/^class Registry : public AbstractRegistry<T_Ptr, std::map<T_Key, T_Ptr*>> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
RegistryWithPred	src/util/easylogging++.h	/^    RegistryWithPred(const RegistryWithPred& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
RegistryWithPred	src/util/easylogging++.h	/^    RegistryWithPred(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
RegistryWithPred	src/util/easylogging++.h	/^class RegistryWithPred : public AbstractRegistry<T_Ptr, std::vector<T_Ptr*>> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
SED	Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SOURCES	Makefile	/^SOURCES = $(libts_la_SOURCES)$/;"	m
START_MOVE_FRAGMENT	src/system/message/MessageMgr.h	/^  START_MOVE_FRAGMENT,   \/\/\/< Beginning of moving fragment process$/;"	e	enum:ts::system::Tag
STRCAT	src/util/easylogging++.h	188;"	d
STRCAT	src/util/easylogging++.h	193;"	d
STRCAT	src/util/easylogging++.h	198;"	d
STRCPY	src/util/easylogging++.h	189;"	d
STRCPY	src/util/easylogging++.h	194;"	d
STRCPY	src/util/easylogging++.h	199;"	d
STRERROR	src/util/easylogging++.h	187;"	d
STRERROR	src/util/easylogging++.h	192;"	d
STRERROR	src/util/easylogging++.h	197;"	d
STRIP	Makefile	/^STRIP = strip$/;"	m
STRTOK	src/util/easylogging++.h	186;"	d
STRTOK	src/util/easylogging++.h	191;"	d
STRTOK	src/util/easylogging++.h	196;"	d
SYSLOG	src/util/easylogging++.h	6014;"	d
SYSLOG	src/util/easylogging++.h	6037;"	d
SYSLOG_AFTER_N	src/util/easylogging++.h	6017;"	d
SYSLOG_AFTER_N	src/util/easylogging++.h	6040;"	d
SYSLOG_EVERY_N	src/util/easylogging++.h	6016;"	d
SYSLOG_EVERY_N	src/util/easylogging++.h	6039;"	d
SYSLOG_IF	src/util/easylogging++.h	6015;"	d
SYSLOG_IF	src/util/easylogging++.h	6038;"	d
SYSLOG_N_TIMES	src/util/easylogging++.h	6018;"	d
SYSLOG_N_TIMES	src/util/easylogging++.h	6041;"	d
ScopedAddFlag	src/util/easylogging++.h	/^        ScopedAddFlag(LoggingFlag flag) : m_flag(flag) { Loggers::addFlag(m_flag); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedAddFlag
ScopedAddFlag	src/util/easylogging++.h	/^    class ScopedAddFlag {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
ScopedLock	src/util/easylogging++.h	/^    explicit ScopedLock(M& mutex) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
ScopedLock	src/util/easylogging++.h	/^class ScopedLock : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal
ScopedLock	src/util/easylogging++.h	/^typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
ScopedRemoveFlag	src/util/easylogging++.h	/^        ScopedRemoveFlag(LoggingFlag flag) : m_flag(flag) { Loggers::removeFlag(m_flag); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedRemoveFlag
ScopedRemoveFlag	src/util/easylogging++.h	/^    class ScopedRemoveFlag {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
Second	src/util/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Semaphore	src/system/util/Semaphore.cpp	/^ts::system::Semaphore::Semaphore(int begin) {$/;"	f	class:ts::system::Semaphore
Semaphore	src/system/util/Semaphore.h	/^struct Semaphore {$/;"	s	namespace:ts::system
StackTrace	src/util/easylogging++.h	/^    StackTrace(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
StackTrace	src/util/easylogging++.h	/^class StackTrace : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug
StackTraceEntry	src/util/easylogging++.h	/^        StackTraceEntry(std::size_t index, char* loc) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
StackTraceEntry	src/util/easylogging++.h	/^        StackTraceEntry(std::size_t index, const char* loc, const char* demang, const char* hex, const char* addr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
StackTraceEntry	src/util/easylogging++.h	/^    class StackTraceEntry {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
StartMove	src/system/action/actions/StartMove.h	/^  StartMove() {}$/;"	f	class:ts::system::action::StartMove
StartMove	src/system/action/actions/StartMove.h	/^class StartMove : public ts::system::Action {$/;"	c	namespace:ts::system::action
State	src/system/fragment/FragmentMgr.h	/^    enum State {$/;"	g	class:ts::system::FragmentMgr
StaticClass	src/util/easylogging++.h	/^class StaticClass {$/;"	c	namespace:el::base
Storage	src/util/easylogging++.h	/^    explicit Storage(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
Storage	src/util/easylogging++.h	/^class Storage : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
StoragePointer	src/util/easylogging++.h	/^typedef std::shared_ptr<base::Storage> StoragePointer;$/;"	t	namespace:el::base::type
Str	src/util/easylogging++.h	/^class Str : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
StrictLogFileSizeCheck	src/util/easylogging++.h	/^    StrictLogFileSizeCheck = 32,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
SysLog	src/util/easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::DispatchAction
SysLogInitializer	src/util/easylogging++.h	/^    SysLogInitializer(const char* processIdent, int options = 0, int facility = 0) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::SysLogInitializer
SysLogInitializer	src/util/easylogging++.h	/^class SysLogInitializer {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base
System	src/system/System.cpp	/^System::System(FragmentTools* fragmentTools, ReduceDataTools* reduceTools):$/;"	f	class:ts::system::System
System	src/system/System.h	/^class System {$/;"	c	namespace:ts::system
TIMED_BLOCK	src/util/easylogging++.h	5625;"	d
TIMED_BLOCK	src/util/easylogging++.h	5642;"	d
TIMED_FUNC	src/util/easylogging++.h	5627;"	d
TIMED_FUNC	src/util/easylogging++.h	5650;"	d
TIMED_SCOPE	src/util/easylogging++.h	5626;"	d
TIMED_SCOPE	src/util/easylogging++.h	5641;"	d
TRACE	src/util/easylogging++.h	5667;"	d
Tag	src/system/message/MessageMgr.h	/^enum Tag {$/;"	g	namespace:ts::system
ThreadId	src/util/easylogging++.h	/^    User = 128, Host = 256, LogMessage = 512, VerboseLevel = 1024, AppName = 2048, ThreadId = 4096,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
ThreadSafe	src/util/easylogging++.h	/^    ThreadSafe(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
ThreadSafe	src/util/easylogging++.h	/^class ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
Timestamp	src/types/Fragment.h	/^typedef std::tuple<uint64_t, uint64_t> Timestamp;$/;"	t	namespace:ts::type
TimestampUnit	src/util/easylogging++.h	/^enum class TimestampUnit : base::type::EnumType {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base
ToFile	src/util/easylogging++.h	/^    ToFile = 2,$/;"	m	class:el::Level::ConfigurationType
ToStandardOutput	src/util/easylogging++.h	/^    ToStandardOutput = 4,$/;"	m	class:el::Level::ConfigurationType
Trace	src/util/easylogging++.h	/^        Trace = 2,$/;"	m	class:el::Level
TypedConfigurations	src/util/easylogging++.h	/^    TypedConfigurations(Configurations* configurations, base::LogStreamsReferenceMap* logStreamsReference) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
TypedConfigurations	src/util/easylogging++.h	/^    TypedConfigurations(const TypedConfigurations& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
TypedConfigurations	src/util/easylogging++.h	/^class TypedConfigurations : public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
UNDEFINED	src/system/message/MessageMgr.h	/^  UNDEFINED,$/;"	e	enum:ts::system::Tag
UPDATE	src/system/fragment/FragmentMgr.h	/^      UPDATE,$/;"	e	enum:ts::system::FragmentMgr::State
UPDATE_FRAGMENT	src/system/message/MessageMgr.h	/^  UPDATE_FRAGMENT,       \/\/\/< Updating fragment from external Node.$/;"	e	enum:ts::system::Tag
Unknown	src/util/easylogging++.h	/^        Unknown = 1010$/;"	m	class:el::Level
Unknown	src/util/easylogging++.h	/^    Unknown = 1010$/;"	m	class:el::Level::ConfigurationType
Update	src/system/action/actions/Update.h	/^  Update() {}$/;"	f	class:ts::system::action::Update
Update	src/system/action/actions/Update.h	/^class Update : public ts::system::Action {$/;"	c	namespace:ts::system::action
User	src/util/easylogging++.h	/^    User = 128, Host = 256, LogMessage = 512, VerboseLevel = 1024, AppName = 2048, ThreadId = 4096,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
VERBOSE	src/util/easylogging++.h	5668;"	d
VERSION	Makefile	/^VERSION = 0.1$/;"	m
VLOG	src/util/easylogging++.h	5957;"	d
VLOG	src/util/easylogging++.h	5976;"	d
VLOG_AFTER_N	src/util/easylogging++.h	5963;"	d
VLOG_AFTER_N	src/util/easylogging++.h	5984;"	d
VLOG_EVERY_N	src/util/easylogging++.h	5961;"	d
VLOG_EVERY_N	src/util/easylogging++.h	5982;"	d
VLOG_IF	src/util/easylogging++.h	5959;"	d
VLOG_IF	src/util/easylogging++.h	5979;"	d
VLOG_IS_ON	src/util/easylogging++.h	5622;"	d
VLOG_IS_ON	src/util/easylogging++.h	5624;"	d
VLOG_N_TIMES	src/util/easylogging++.h	5965;"	d
VLOG_N_TIMES	src/util/easylogging++.h	5986;"	d
VRegistry	src/util/easylogging++.h	/^    explicit VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags) : m_level(level), m_pFlags(pFlags) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
VRegistry	src/util/easylogging++.h	/^class VRegistry : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
Verbose	src/util/easylogging++.h	/^        Verbose = 64,$/;"	m	class:el::Level
VerboseLevel	src/util/easylogging++.h	/^    User = 128, Host = 256, LogMessage = 512, VerboseLevel = 1024, AppName = 2048, ThreadId = 4096,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
VerboseLevel	src/util/easylogging++.h	/^typedef int VerboseLevel;$/;"	t	namespace:el::base::type
VersionInfo	src/util/easylogging++.h	/^class VersionInfo : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base
WARNING	src/util/easylogging++.h	5663;"	d
Warning	src/util/easylogging++.h	/^        Warning = 32, $/;"	m	class:el::Level
WorkFragment	src/system/exec/ExecMgr.h	/^typedef std::pair<ts::type::Fragment*, std::vector<ts::type::Fragment*> > WorkFragment;$/;"	t	namespace:ts::system
WorkFragment	src/system/fragment/FragmentMgr.cpp	/^typedef pair<Fragment*, vector<Fragment*> > WorkFragment;$/;"	t	namespace:ts::system	file:
Writer	src/util/easylogging++.h	/^    Writer(Level level, const char* file, unsigned long int line,  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Writer
Writer	src/util/easylogging++.h	/^class Writer : base::NoCopy {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder
X	src/types/ID.h	/^  enum {X = 0, Y = 1, Z = 2};$/;"	e	enum:ts::type::ID::__anon1
Y	src/types/ID.h	/^  enum {X = 0, Y = 1, Z = 2};$/;"	e	enum:ts::type::ID::__anon1
Z	src/types/ID.h	/^  enum {X = 0, Y = 1, Z = 2};$/;"	e	enum:ts::type::ID::__anon1
_CURRENT_FILE_LOGGER_ID	src/util/easylogging++.h	5966;"	d
_CURRENT_FILE_LOGGER_ID	src/util/easylogging++.h	5968;"	d
_CURRENT_FILE_PERFORMANCE_LOGGER_ID	src/util/easylogging++.h	4895;"	d
_CURRENT_FILE_PERFORMANCE_LOGGER_ID	src/util/easylogging++.h	4897;"	d
_ELPP_CLANG_VERSION	src/util/easylogging++.h	41;"	d
_ELPP_COMPILER_CLANG	src/util/easylogging++.h	40;"	d
_ELPP_COMPILER_GCC	src/util/easylogging++.h	18;"	d
_ELPP_COMPILER_INTEL	src/util/easylogging++.h	58;"	d
_ELPP_COMPILER_MSVC	src/util/easylogging++.h	30;"	d
_ELPP_CRASH_HANDLER_INIT	src/util/easylogging++.h	6250;"	d
_ELPP_CRT_DBG_WARNINGS	src/util/easylogging++.h	31;"	d
_ELPP_CXX0X	src/util/easylogging++.h	23;"	d
_ELPP_CXX0X	src/util/easylogging++.h	33;"	d
_ELPP_CXX11	src/util/easylogging++.h	25;"	d
_ELPP_CXX11	src/util/easylogging++.h	35;"	d
_ELPP_CXX11	src/util/easylogging++.h	45;"	d
_ELPP_CYGWIN	src/util/easylogging++.h	54;"	d
_ELPP_DEBUG_LOG	src/util/easylogging++.h	241;"	d
_ELPP_DEBUG_LOG	src/util/easylogging++.h	243;"	d
_ELPP_ERROR_LOG	src/util/easylogging++.h	256;"	d
_ELPP_ERROR_LOG	src/util/easylogging++.h	258;"	d
_ELPP_EXPORT	src/util/easylogging++.h	178;"	d
_ELPP_EXPORT	src/util/easylogging++.h	180;"	d
_ELPP_EXPORT	src/util/easylogging++.h	183;"	d
_ELPP_FATAL_LOG	src/util/easylogging++.h	261;"	d
_ELPP_FATAL_LOG	src/util/easylogging++.h	263;"	d
_ELPP_FUNC	src/util/easylogging++.h	215;"	d
_ELPP_FUNC	src/util/easylogging++.h	217;"	d
_ELPP_FUNC	src/util/easylogging++.h	219;"	d
_ELPP_FUNC	src/util/easylogging++.h	221;"	d
_ELPP_FUNC	src/util/easylogging++.h	223;"	d
_ELPP_FUNC	src/util/easylogging++.h	226;"	d
_ELPP_FUNC	src/util/easylogging++.h	228;"	d
_ELPP_GCC_VERSION	src/util/easylogging++.h	19;"	d
_ELPP_INFO_LOG	src/util/easylogging++.h	246;"	d
_ELPP_INFO_LOG	src/util/easylogging++.h	248;"	d
_ELPP_INITI_BASIC_DECLR	src/util/easylogging++.h	1477;"	d
_ELPP_INIT_EASYLOGGINGPP	src/util/easylogging++.h	6251;"	d
_ELPP_INTERNAL_DEBUGGING_ENDL	src/util/easylogging++.h	99;"	d
_ELPP_INTERNAL_DEBUGGING_MSG	src/util/easylogging++.h	102;"	d
_ELPP_INTERNAL_DEBUGGING_OUT_ERROR	src/util/easylogging++.h	96;"	d
_ELPP_INTERNAL_DEBUGGING_OUT_INFO	src/util/easylogging++.h	93;"	d
_ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	src/util/easylogging++.h	125;"	d
_ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	src/util/easylogging++.h	129;"	d
_ELPP_INTERNAL_INFO_LEVEL	src/util/easylogging++.h	147;"	d
_ELPP_LOGGING_ENABLED	src/util/easylogging++.h	238;"	d
_ELPP_LOG_PERMS	src/util/easylogging++.h	174;"	d
_ELPP_MINGW	src/util/easylogging++.h	50;"	d
_ELPP_MIN_UNIT	src/util/easylogging++.h	5628;"	d
_ELPP_MIN_UNIT	src/util/easylogging++.h	5630;"	d
_ELPP_OS_ANDROID	src/util/easylogging++.h	83;"	d
_ELPP_OS_FREEBSD	src/util/easylogging++.h	75;"	d
_ELPP_OS_LINUX	src/util/easylogging++.h	67;"	d
_ELPP_OS_LINUX	src/util/easylogging++.h	88;"	d
_ELPP_OS_LINUX	src/util/easylogging++.h	90;"	d
_ELPP_OS_MAC	src/util/easylogging++.h	71;"	d
_ELPP_OS_UNIX	src/util/easylogging++.h	79;"	d
_ELPP_OS_UNIX	src/util/easylogging++.h	87;"	d
_ELPP_OS_UNIX	src/util/easylogging++.h	89;"	d
_ELPP_OS_WINDOWS	src/util/easylogging++.h	63;"	d
_ELPP_STACKTRACE	src/util/easylogging++.h	161;"	d
_ELPP_THREADING_ENABLED	src/util/easylogging++.h	212;"	d
_ELPP_TRACE_LOG	src/util/easylogging++.h	266;"	d
_ELPP_TRACE_LOG	src/util/easylogging++.h	268;"	d
_ELPP_UNUSED	src/util/easylogging++.h	171;"	d
_ELPP_USE_DEF_CRASH_HANDLER	src/util/easylogging++.h	6246;"	d
_ELPP_USE_STD_THREADING	src/util/easylogging++.h	203;"	d
_ELPP_VARIADIC_TEMPLATES_SUPPORTED	src/util/easylogging++.h	231;"	d
_ELPP_VARIADIC_TEMPLATES_SUPPORTED	src/util/easylogging++.h	234;"	d
_ELPP_VERBOSE_LOG	src/util/easylogging++.h	271;"	d
_ELPP_VERBOSE_LOG	src/util/easylogging++.h	273;"	d
_ELPP_WARNING_LOG	src/util/easylogging++.h	251;"	d
_ELPP_WARNING_LOG	src/util/easylogging++.h	253;"	d
_ELPP_WRITE_LOG	src/util/easylogging++.h	4882;"	d
_ELPP_WRITE_LOG_AFTER_N	src/util/easylogging++.h	4889;"	d
_ELPP_WRITE_LOG_EVERY_N	src/util/easylogging++.h	4886;"	d
_ELPP_WRITE_LOG_IF	src/util/easylogging++.h	4884;"	d
_ELPP_WRITE_LOG_N_TIMES	src/util/easylogging++.h	4892;"	d
_INITIALIZE_EASYLOGGINGPP	src/util/easylogging++.h	6260;"	d
_INITIALIZE_NULL_EASYLOGGINGPP	src/util/easylogging++.h	6262;"	d
_INIT_SYSLOG	src/util/easylogging++.h	5300;"	d
_SHARE_EASYLOGGINGPP	src/util/easylogging++.h	6271;"	d
_START_EASYLOGGINGPP	src/util/easylogging++.h	6280;"	d
_TRACE	src/util/easylogging++.h	5972;"	d
_TRACE	src/util/easylogging++.h	5973;"	d
_end	src/system/System.h	/^  std::atomic<bool> _end;$/;"	m	class:ts::system::System
_equal	src/types/Fragment.cpp	/^bool Fragment::_equal(Fragment* another) {$/;"	f	class:ts::type::Fragment
_reduce	src/types/Fragment.cpp	/^ReduceData* Fragment::_reduce() {$/;"	f	class:ts::type::Fragment
_reduce	src/types/Fragment.cpp	/^ReduceData* Fragment::_reduce(ReduceData* data) {$/;"	f	class:ts::type::Fragment
_reduceStep	src/types/Fragment.cpp	/^void Fragment::_reduceStep(ReduceData* data) {$/;"	f	class:ts::type::Fragment
_runStep	src/types/Fragment.cpp	/^void Fragment::_runStep(std::vector<Fragment*> neighbours) {$/;"	f	class:ts::type::Fragment
_size	src/system/message/MessageMgr.h	/^  size_t _size;$/;"	m	class:ts::system::MessageMgr
_tryRemoveAllStates	src/types/Fragment.cpp	/^void Fragment::_tryRemoveAllStates() {$/;"	f	class:ts::type::Fragment
_tryRemoveState	src/types/Fragment.cpp	/^void Fragment::_tryRemoveState(Timestamp timestamp) {$/;"	f	class:ts::type::Fragment
_vend	src/types/Fragment.h	/^  bool _vend;                                \/\/\/< Flag that indicate fragment is ready to end$/;"	m	class:ts::type::Fragment
_vid	src/types/Fragment.h	/^  ID _vid;                                   \/\/\/< ID of fragment$/;"	m	class:ts::type::Fragment
_viteration	src/types/Fragment.h	/^  uint64_t _viteration;                      \/\/\/< Current iteration$/;"	m	class:ts::type::Fragment
_vlaststate	src/types/Fragment.h	/^  Fragment* _vlaststate;                           \/\/\/< last state$/;"	m	class:ts::type::Fragment
_vneighbours	src/types/Fragment.h	/^  bool _vneighbours;                         \/\/\/< Flag that indicate fragment need neighbours for next step$/;"	m	class:ts::type::Fragment
_vneighboursLocation	src/types/Fragment.h	/^  std::map<ID, NodeID> _vneighboursLocation; \/\/\/< Fragment's neighbours location$/;"	m	class:ts::type::Fragment
_vneighboursLocationMutex	src/types/Fragment.h	/^  std::mutex _vneighboursLocationMutex;$/;"	m	class:ts::type::Fragment
_vneighboursState	src/types/Fragment.h	/^  Timestamp _vneighboursState;$/;"	m	class:ts::type::Fragment
_vnodeID	src/types/Fragment.h	/^  NodeID _vnodeID;                           \/\/\/< Logic fragment location$/;"	m	class:ts::type::Fragment
_vprogress	src/types/Fragment.h	/^  uint64_t _vprogress;                       \/\/\/< Current progress of iteration$/;"	m	class:ts::type::Fragment
_vreduce	src/types/Fragment.h	/^  bool _vreduce;                             \/\/\/< Flag that indicate fragment need for reduce step$/;"	m	class:ts::type::Fragment
_vreduced	src/types/Fragment.h	/^  bool _vreduced;                            \/\/\/< Flag that indicate fragment's reduce data was used$/;"	m	class:ts::type::Fragment
_vstateGetted	src/types/Fragment.h	/^  std::map<Timestamp, std::set<ID>> _vstateGetted; \/\/\/< states getted by neighbours$/;"	m	class:ts::type::Fragment
_vstateGettedLock	src/types/Fragment.h	/^  ts::RWLock _vstateGettedLock;$/;"	m	class:ts::type::Fragment
_vstates	src/types/Fragment.h	/^  std::map<Timestamp, Fragment*> _vstates;   \/\/\/< stored states of fragment$/;"	m	class:ts::type::Fragment
_vstatesMutex	src/types/Fragment.h	/^  std::mutex _vstatesMutex;$/;"	m	class:ts::type::Fragment
_vupdate	src/types/Fragment.h	/^  bool _vupdate;                             \/\/\/< Flag that indicate external fragment data need to update on remote nodes$/;"	m	class:ts::type::Fragment
abort	src/util/easylogging++.h	/^static inline void abort(int status, const std::string& reason = std::string()) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
abs_builddir	Makefile	/^abs_builddir = \/home\/yoba\/code\/testing-system$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/yoba\/code\/testing-system$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/yoba\/code\/testing-system$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/yoba\/code\/testing-system$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = mpic++$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_find_uintX_t	configure	/^ac_fn_c_find_uintX_t ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
action	src/system/action/actions/ConfirmMove.cpp	/^namespace action {$/;"	n	namespace:ts::system	file:
action	src/system/action/actions/ConfirmMove.h	/^namespace action {$/;"	n	namespace:ts::system
action	src/system/action/actions/Move.cpp	/^namespace action {$/;"	n	namespace:ts::system	file:
action	src/system/action/actions/Move.h	/^namespace action {$/;"	n	namespace:ts::system
action	src/system/action/actions/Reduce.cpp	/^namespace action {$/;"	n	namespace:ts::system	file:
action	src/system/action/actions/Reduce.h	/^namespace action {$/;"	n	namespace:ts::system
action	src/system/action/actions/StartMove.cpp	/^namespace action {$/;"	n	namespace:ts::system	file:
action	src/system/action/actions/StartMove.h	/^namespace action {$/;"	n	namespace:ts::system
action	src/system/action/actions/Update.cpp	/^namespace action {$/;"	n	namespace:ts::system	file:
action	src/system/action/actions/Update.h	/^namespace action {$/;"	n	namespace:ts::system
actionBuilder	src/system/System.h	/^  ActionBuilder* actionBuilder;$/;"	m	class:ts::system::System
actionBuilder	src/system/message/MessageMgr.h	/^  ActionBuilder* actionBuilder;$/;"	m	class:ts::system::MessageMgr
actionLoop	src/system/System.cpp	/^void System::actionLoop() {$/;"	f	class:ts::system::System
actionLoopThread	src/system/System.h	/^  std::thread actionLoopThread;$/;"	m	class:ts::system::System
actionMap	src/system/action/ActionBuilder.h	/^  std::map<int, Action*> actionMap;$/;"	m	class:ts::system::ActionBuilder
actionQueue	src/system/System.h	/^  std::queue<Action*> actionQueue;$/;"	m	class:ts::system::System
actionQueueListener	src/system/System.h	/^  Semaphore actionQueueListener;$/;"	m	class:ts::system::System
add	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::add(const WorkFragment& fragment) {$/;"	f	class:ts::system::ExecMgr
add	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::add(const vector<WorkFragment>& fragments) {$/;"	f	class:ts::system::ExecMgr
addAction	src/system/System.cpp	/^void System::addAction(Action* action) {$/;"	f	class:ts::system::System
addFlag	src/util/easylogging++.h	/^    inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
addFlag	src/util/easylogging++.h	/^    inline void addFlag(base::FormatFlags flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
addFlag	src/util/easylogging++.h	/^    static inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
addFlag	src/util/easylogging++.h	/^static inline void addFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
addFragment	src/system/System.cpp	/^void System::addFragment(ts::type::Fragment* fragment) {$/;"	f	class:ts::system::System
addFragment	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::addFragment(Fragment* fragment) {$/;"	f	class:ts::system::FragmentMgr
addNeighbour	src/types/Fragment.cpp	/^void Fragment::addNeighbour(ID id, NodeID node) {$/;"	f	class:ts::type::Fragment
addToBuff	src/util/easylogging++.h	/^    static inline char* addToBuff(const char* str, char* buf, const char* bufLim) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	f
allowed	src/util/easylogging++.h	/^    bool allowed(base::type::VerboseLevel vlevel, const char* file) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ax_mpi.m4 \\$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(tssystemdir)" \\$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__post_remove_distdir	Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_libts_la_OBJECTS	Makefile	/^am_libts_la_OBJECTS = src\/system\/fragment\/FragmentMgr.lo \\$/;"	m
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
ax_pthread_config	Makefile	/^ax_pthread_config = $/;"	m
barrier	src/system/message/comm/Comm.cpp	/^void Comm::barrier() {$/;"	f	class:ts::system::Comm
base	src/util/easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag
base	src/util/easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
base	src/util/easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
base	src/util/easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData
base	src/util/easylogging++.h	/^namespace base {$/;"	n	namespace:el
base	src/util/easylogging++.h	/^namespace base {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
base	src/util/easylogging++.h	/^namespace base {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base
base	src/util/easylogging++.h	/^namespace base {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::el
begin	src/util/easylogging++.h	/^    iterator begin(void) { return getContainer().begin(); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableContainer
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bitwise	src/util/easylogging++.h	/^namespace bitwise {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
blockName	src/util/easylogging++.h	/^inline const std::string* PerformanceTrackingData::blockName() const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
boundaryDeserialize	src/types/FragmentTools.cpp	/^Fragment* FragmentTools::boundaryDeserialize(Arc* arc) {$/;"	f	class:ts::type::FragmentTools
boundarySerialize	src/types/FragmentTools.cpp	/^Arc* FragmentTools::boundarySerialize(Fragment* fragment) {$/;"	f	class:ts::type::FragmentTools
brief	src/util/easylogging++.h	/^        const char* brief;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon3
buffer	src/system/message/MessageMgr.h	/^  char* buffer;$/;"	m	struct:ts::system::Message
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	src/system/action/ActionBuilder.cpp	/^Action* ActionBuilder::build(const Message& message) {$/;"	f	class:ts::system::ActionBuilder
build	src/util/easylogging++.h	/^    base::type::string_t build(const LogMessage* logMessage, bool appendNewLine) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder
build	src/util/easylogging++.h	/^    void build(Configurations* configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
c	src/types/ID.h	/^  uint64_t c[3];$/;"	m	struct:ts::type::ID
cStringCaseEq	src/util/easylogging++.h	/^    static bool cStringCaseEq(const char* s1, const char* s2) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
cStringEq	src/util/easylogging++.h	/^    static inline bool cStringEq(const char* s1, const char* s2) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
castFromInt	src/util/easylogging++.h	/^    static ConfigurationType castFromInt(base::type::EnumType c) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
castFromInt	src/util/easylogging++.h	/^    static Level castFromInt(base::type::EnumType l) {$/;"	f	class:el::Level::LevelHelper
castToInt	src/util/easylogging++.h	/^    static base::type::EnumType castToInt(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
castToInt	src/util/easylogging++.h	/^    static base::type::EnumType castToInt(Level level) {$/;"	f	class:el::Level::LevelHelper
charPtrVal	src/util/easylogging++.h	/^static inline const char* charPtrVal(const char* pointer) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
char_t	src/util/easylogging++.h	/^typedef wchar_t char_t;$/;"	t	namespace:el::base::type
checkNotNull	src/util/easylogging++.h	/^static T* checkNotNull(T* ptr, const char* name, const char* loggers, ...) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::el::base::utils
checkpointId	src/util/easylogging++.h	/^    inline std::string checkpointId(void) const { return m_checkpointId; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
clean	autogen.sh	/^clean () {$/;"	f
clear	src/util/easylogging++.h	/^    inline void clear(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
clearBuff	src/util/easylogging++.h	/^    static inline char* clearBuff(char buff[], std::size_t lim) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
comm	src/system/message/MessageMgr.h	/^  Comm* comm;$/;"	m	class:ts::system::MessageMgr
comm	src/system/message/comm/Comm.h	/^  MPI_Comm comm;$/;"	m	class:ts::system::Comm
commandLineArgs	src/util/easylogging++.h	/^    inline const base::utils::CommandLineArgs* commandLineArgs(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
commandLineArgs	src/util/easylogging++.h	/^    static inline const el::base::utils::CommandLineArgs* commandLineArgs(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
compute	src/system/exec/ExecMgr.cpp	/^bool ts::system::ExecMgr::compute(WorkFragment& fragment) {$/;"	f	class:ts::system::ExecMgr
condition	src/system/util/Listener.h	/^  std::atomic<bool> condition;$/;"	m	struct:ts::system::Listener
configurationFile	src/util/easylogging++.h	/^    inline const std::string& configurationFile(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
configurationType	src/util/easylogging++.h	/^    inline ConfigurationType configurationType(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
configurations	src/util/easylogging++.h	/^    const Configurations* configurations(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
configurations	src/util/easylogging++.h	/^    inline Configurations* configurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
configure	src/util/easylogging++.h	/^    void configure(const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
configureFromArg	src/util/easylogging++.h	/^    static inline bool configureFromArg(const char* argKey) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
configureFromGlobal	src/util/easylogging++.h	/^    static void configureFromGlobal(const char* globalConfigurationFilePath) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
confirmMove	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::confirmMove(const ts::type::ID& id, NodeID node) {$/;"	f	class:ts::system::FragmentMgr
const_iterator	src/util/easylogging++.h	/^    typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
const_iterator	src/util/easylogging++.h	/^    typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableContainer
const_iterator	src/util/easylogging++.h	/^    typedef typename Registry<T_Ptr, T_Key>::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
const_iterator	src/util/easylogging++.h	/^    typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
consts	src/util/easylogging++.h	/^namespace consts {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base
contains	src/util/easylogging++.h	/^    static inline bool contains(const char* str, char c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
convertAndAddToBuff	src/util/easylogging++.h	/^    static inline char* convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLim, bool zeroPadded = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
convertFromString	src/util/easylogging++.h	/^    static ConfigurationType convertFromString(const char* configStr) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
convertFromString	src/util/easylogging++.h	/^    static Level convertFromString(const char* levelStr) {$/;"	f	class:el::Level::LevelHelper
convertTemplateToStdString	src/util/easylogging++.h	/^    static std::string convertTemplateToStdString(const T& templ) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
convertToColoredOutput	src/util/easylogging++.h	/^    void convertToColoredOutput(base::type::string_t* logLine, Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogBuilder
convertToString	src/util/easylogging++.h	/^    static const char* convertToString(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
convertToString	src/util/easylogging++.h	/^    static const char* convertToString(Level level) {$/;"	f	class:el::Level::LevelHelper
copy	src/system/action/actions/ConfirmMove.cpp	/^Action* ConfirmMove::copy() {$/;"	f	class:ts::system::action::ConfirmMove
copy	src/system/action/actions/Move.cpp	/^  Action* Move::copy() {$/;"	f	class:ts::system::action::Move
copy	src/system/action/actions/Reduce.cpp	/^Action* Reduce::copy() {$/;"	f	class:ts::system::action::Reduce
copy	src/system/action/actions/StartMove.cpp	/^Action* StartMove::copy() {$/;"	f	class:ts::system::action::StartMove
copy	src/system/action/actions/Update.cpp	/^Action* Update::copy() {$/;"	f	class:ts::system::action::Update
copy	tests/fragment.h	/^  virtual ts::type::ReduceData* copy() { return new ReduceData(n); }$/;"	f	class:ReduceData
crashAbort	src/util/easylogging++.h	/^    static inline void crashAbort(int sig, const char* sourceFile = "", unsigned int long line = 0) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
crashAbort	src/util/easylogging++.h	/^static inline void crashAbort(int sig) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
crashReason	src/util/easylogging++.h	/^static std::string crashReason(int sig) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
createExternal	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::createExternal(Fragment* f) {$/;"	f	class:ts::system::FragmentMgr
createExternal	src/types/Fragment.cpp	/^void Fragment::createExternal(Fragment* f) {$/;"	f	class:ts::type::Fragment
createPath	src/util/easylogging++.h	/^    static bool createPath(const std::string& path) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
customFormatSpecifiers	src/util/easylogging++.h	/^    const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
data	src/system/action/actions/Reduce.h	/^  ts::type::ReduceData* data;$/;"	m	class:ts::system::action::Reduce
dataType	src/util/easylogging++.h	/^    inline PerformanceTrackingData::DataType dataType(void) const { return m_dataType; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dateTimeFormat	src/util/easylogging++.h	/^    inline const std::string& dateTimeFormat(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
debug	src/util/easylogging++.h	/^namespace debug {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base
deepCopy	src/util/easylogging++.h	/^    virtual inline void deepCopy(const AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
defaultConfigurations	src/util/easylogging++.h	/^    inline Configurations* defaultConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
defaultConfigurations	src/util/easylogging++.h	/^    static inline const Configurations* defaultConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
defaultCrashHandler	src/util/easylogging++.h	/^static inline void defaultCrashHandler(int sig) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
defaultPreRollOutCallback	src/util/easylogging++.h	/^static inline void defaultPreRollOutCallback(const char*, std::size_t) {}$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base
defaultTypedConfigurations	src/util/easylogging++.h	/^    static base::TypedConfigurations defaultTypedConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
deserialize	src/types/ID.cpp	/^ID ID::deserialize(ts::Arc* arc) {$/;"	f	class:ts::type::ID
deserialize	tests/fragment.h	/^  ts::type::Fragment* deserialize(ts::Arc* arc) {$/;"	f	class:FragmentTools
deserialize	tests/fragment.h	/^  ts::type::ReduceData* deserialize(ts::Arc* arc) {$/;"	f	class:ReduceDataTools
detail	src/util/easylogging++.h	/^        const char* detail;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon3
dispatch	src/util/easylogging++.h	/^    void dispatch(base::type::string_t&& logLine) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
dispatch	src/util/easylogging++.h	/^    void dispatch(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::LogDispatcher
dispatchAction	src/util/easylogging++.h	/^    inline base::DispatchAction dispatchAction(void) const { return m_dispatchAction; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distr	src/distr/Distributor.h	/^namespace distr {$/;"	n	namespace:ts
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
el	src/util/easylogging++.h	/^namespace el {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base
el	src/util/easylogging++.h	/^namespace el {$/;"	n
el_getVALength	src/util/easylogging++.h	4872;"	d
el_resolveVALength	src/util/easylogging++.h	4881;"	d
empty	src/util/easylogging++.h	/^    inline bool empty(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
enabled	src/util/easylogging++.h	/^    inline bool enabled(Level level) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
enabled	src/util/easylogging++.h	/^    inline bool enabled(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
enabled	src/util/easylogging++.h	/^    inline bool enabled(void) const { return m_enabled; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Callback
end	src/system/System.cpp	/^void System::end() {$/;"	f	class:ts::system::System
end	src/system/exec/ExecMgr.h	/^  std::atomic<bool> end;$/;"	m	class:ts::system::ExecMgr
end	src/system/message/MessageMgr.h	/^  std::atomic<bool> end;$/;"	m	class:ts::system::MessageMgr
end	src/util/easylogging++.h	/^    iterator end(void) { return getContainer().end(); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableContainer
endGlobalReduce	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::endGlobalReduce() {$/;"	f	class:ts::system::ExecMgr
endTime	src/util/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::endTime() const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
endsWith	src/util/easylogging++.h	/^    static inline bool endsWith(const std::string& str, const std::string& end) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
equal	src/types/Fragment.cpp	/^bool Fragment::equal(Fragment* another) {$/;"	f	class:ts::type::Fragment
execMgr	src/system/System.h	/^  ExecMgr* execMgr;$/;"	m	class:ts::system::System
execMgr	src/system/action/Action.h	/^  ExecMgr* execMgr;$/;"	m	class:ts::system::Action
execMgr	src/system/action/ActionBuilder.h	/^  ExecMgr*    execMgr;$/;"	m	class:ts::system::ActionBuilder
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
externalFragments	src/system/fragment/FragmentMgr.h	/^    std::vector<ts::type::Fragment*> externalFragments;$/;"	m	class:ts::system::FragmentMgr
externalFragmentsLock	src/system/fragment/FragmentMgr.h	/^    pthread_rwlock_t* externalFragmentsLock;$/;"	m	class:ts::system::FragmentMgr
externalReduceData	src/system/exec/ExecMgr.h	/^  ts::type::ReduceData* externalReduceData;$/;"	m	class:ts::system::ExecMgr
file	src/util/easylogging++.h	/^    inline const char* file(void) const { return m_file; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
file	src/util/easylogging++.h	/^    inline const std::string& file(void) const { return m_file; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
file	tests/fragment.h	/^  std::ofstream file;$/;"	m	class:Fragment
fileStream	src/util/easylogging++.h	/^    inline base::type::fstream_t* fileStream(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
filename	src/util/easylogging++.h	/^    inline const char* filename(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
filename	src/util/easylogging++.h	/^    inline const std::string& filename(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
findFragment	src/system/fragment/FragmentMgr.cpp	/^Fragment* FragmentMgr::findFragment(const ts::type::ID& id) {$/;"	f	class:ts::system::FragmentMgr
firstCheckpoint	src/util/easylogging++.h	/^    inline bool firstCheckpoint(void) const { return m_firstCheckpoint; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
flags	src/types/util/FragmentDeserializer.cpp	/^void FragmentDeserializer::flags(Fragment* fragment, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentDeserializer
flags	src/types/util/FragmentSerializer.cpp	/^void FragmentSerializer::flags(Fragment* fragment, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentSerializer
flags	src/util/easylogging++.h	/^    inline base::type::EnumType flags(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
flags	src/util/easylogging++.h	/^    inline base::type::EnumType flags(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
flush	src/util/easylogging++.h	/^    inline void flush(Level level, base::type::fstream_t* fs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
flush	src/util/easylogging++.h	/^    inline void flush(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
flushAll	src/util/easylogging++.h	/^    inline void flushAll(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
flushAll	src/util/easylogging++.h	/^    static inline void flushAll(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
foo	configure	/^foo()$/;"	f
forEachConfigType	src/util/easylogging++.h	/^    static inline void forEachConfigType(base::type::EnumType* startIndex, const std::function<bool(void)>& fn) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
forEachLevel	src/util/easylogging++.h	/^    static inline void forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>& fn) {$/;"	f	class:el::Level::LevelHelper
format	src/util/easylogging++.h	/^    inline const base::type::string_t& format(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
formatSpecifier	src/util/easylogging++.h	/^    inline const char* formatSpecifier(void) const { return m_formatSpecifier; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
formattedTimeTaken	src/util/easylogging++.h	/^    inline const base::type::string_t* formattedTimeTaken() const { return &m_formattedTimeTaken; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
fragment	src/system/action/actions/Move.h	/^  ts::type::Fragment* fragment;$/;"	m	class:ts::system::action::Move
fragment	src/system/action/actions/Update.h	/^  ts::type::Fragment* fragment;$/;"	m	class:ts::system::action::Update
fragmentListener	src/system/System.h	/^  Semaphore fragmentListener;$/;"	m	class:ts::system::System
fragmentMgr	src/system/System.h	/^  FragmentMgr* fragmentMgr;$/;"	m	class:ts::system::System
fragmentMgr	src/system/action/Action.h	/^  FragmentMgr* fragmentMgr;$/;"	m	class:ts::system::Action
fragmentMgr	src/system/action/ActionBuilder.h	/^  FragmentMgr*    fragmentMgr;$/;"	m	class:ts::system::ActionBuilder
fragmentMgr	src/system/message/MessageMgr.h	/^  FragmentMgr* fragmentMgr;$/;"	m	class:ts::system::MessageMgr
fragmentQueue	src/system/exec/ExecMgr.h	/^  std::queue<WorkFragment> fragmentQueue;$/;"	m	class:ts::system::ExecMgr
fragmentTool	src/system/message/MessageMgr.h	/^  ts::type::FragmentTools* fragmentTool;$/;"	m	class:ts::system::MessageMgr
fragmentTools	src/system/action/Action.h	/^  ts::type::FragmentTools* fragmentTools;$/;"	m	class:ts::system::Action
fragmentTools	src/system/action/ActionBuilder.h	/^  ts::type::FragmentTools* fragmentTools;$/;"	m	class:ts::system::ActionBuilder
fragmentTools	src/system/fragment/FragmentMgr.h	/^    type::FragmentTools* fragmentTools;$/;"	m	class:ts::system::FragmentMgr
fragments	src/system/fragment/FragmentMgr.h	/^    std::map<ts::type::Fragment*, State> fragments;$/;"	m	class:ts::system::FragmentMgr
fragmentsLock	src/system/fragment/FragmentMgr.h	/^    pthread_rwlock_t* fragmentsLock;$/;"	m	class:ts::system::FragmentMgr
fstream_t	src/util/easylogging++.h	/^typedef std::wfstream fstream_t;$/;"	t	namespace:el::base::type
fullDeserialize	src/types/FragmentTools.cpp	/^Fragment* FragmentTools::fullDeserialize(Arc* arc) {$/;"	f	class:ts::type::FragmentTools
fullSerialize	src/types/FragmentTools.cpp	/^Arc* FragmentTools::fullSerialize(Fragment* fragment) {$/;"	f	class:ts::type::FragmentTools
func	src/util/easylogging++.h	/^    inline const char* func(void) const { return m_func; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
func	src/util/easylogging++.h	/^    inline const std::string& func(void) const { return m_func; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
func_append	config.status	/^func_append ()\\$/;"	f
func_append	configure	/^func_append ()\\$/;"	f
func_append	libtool	/^func_append ()$/;"	f
func_append	ltmain.sh	/^func_append ()$/;"	f
func_append_quoted	config.status	/^func_append_quoted ()\\$/;"	f
func_append_quoted	configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	libtool	/^func_append_quoted ()$/;"	f
func_append_quoted	ltmain.sh	/^func_append_quoted ()$/;"	f
func_arith	config.status	/^func_arith ()\\$/;"	f
func_arith	configure	/^func_arith ()\\$/;"	f
func_arith	libtool	/^func_arith ()$/;"	f
func_arith	ltmain.sh	/^func_arith ()$/;"	f
func_at_file	ar-lib	/^func_at_file ()$/;"	f
func_basename	config.status	/^func_basename ()\\$/;"	f
func_basename	configure	/^func_basename ()\\$/;"	f
func_basename	libtool	/^func_basename ()$/;"	f
func_basename	ltmain.sh	/^func_basename ()$/;"	f
func_check_version_match	libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
func_config	libtool	/^func_config ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	libtool	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	libtool	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	libtool	/^func_cygpath ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_dirname	config.status	/^func_dirname ()\\$/;"	f
func_dirname	configure	/^func_dirname ()\\$/;"	f
func_dirname	libtool	/^func_dirname ()$/;"	f
func_dirname	ltmain.sh	/^func_dirname ()$/;"	f
func_dirname_and_basename	config.status	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	libtool	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_echo	libtool	/^func_echo ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_echo_all	libtool	/^func_echo_all ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	ar-lib	/^func_error ()$/;"	f
func_error	libtool	/^func_error ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_exec_program	libtool	/^func_exec_program ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	libtool	/^func_exec_program_core ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_execute_cmds	libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	libtool	/^func_fallback_echo ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	libtool	/^func_features ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_file_conv	ar-lib	/^func_file_conv ()$/;"	f
func_file_conv	compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_grep	libtool	/^func_grep ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_help	libtool	/^func_help ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_infer_tag	libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	config.status	/^func_len ()\\$/;"	f
func_len	configure	/^func_len ()\\$/;"	f
func_len	libtool	/^func_len ()$/;"	f
func_len	ltmain.sh	/^func_len ()$/;"	f
func_lo2o	config.status	/^func_lo2o ()\\$/;"	f
func_lo2o	configure	/^func_lo2o ()\\$/;"	f
func_lo2o	libtool	/^func_lo2o ()$/;"	f
func_lo2o	ltmain.sh	/^func_lo2o ()$/;"	f
func_lt_dump_args	libtool	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	libtool	/^func_mode_help ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	libtool	/^func_mode_install ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	libtool	/^func_mode_link ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	libtool	/^func_normal_abspath ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	libtool	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	libtool	/^func_relative_path ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_replace_sysroot	libtool	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	libtool	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_show_eval	libtool	/^func_show_eval ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_source	libtool	/^func_source ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_split_long_opt	config.status	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	libtool	/^func_split_long_opt ()$/;"	f
func_split_long_opt	ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_short_opt	config.status	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	libtool	/^func_split_short_opt ()$/;"	f
func_split_short_opt	ltmain.sh	/^func_split_short_opt ()$/;"	f
func_stripname	config.status	/^func_stripname ()\\$/;"	f
func_stripname	configure	/^func_stripname ()\\$/;"	f
func_stripname	libtool	/^func_stripname ()$/;"	f
func_stripname	ltmain.sh	/^func_stripname ()$/;"	f
func_stripname_cnf	configure	/^func_stripname_cnf ()$/;"	f
func_to_host_file	libtool	/^func_to_host_file ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	libtool	/^func_to_tool_file ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	libtool	/^func_tr_sh ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	libtool	/^func_usage ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_verbose	libtool	/^func_verbose ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_version	libtool	/^func_version ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_warning	libtool	/^func_warning ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	config.status	/^func_xform ()\\$/;"	f
func_xform	configure	/^func_xform ()\\$/;"	f
func_xform	libtool	/^func_xform ()$/;"	f
func_xform	ltmain.sh	/^func_xform ()$/;"	f
generate	autogen.sh	/^generate () {$/;"	f
generateNew	src/util/easylogging++.h	/^    void generateNew(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
get	src/util/Arc.h	/^  char* get() {$/;"	f	class:ts::Arc
get	src/util/easylogging++.h	/^    Logger* get(const std::string& id, bool forceCreation = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
get	src/util/easylogging++.h	/^    inline Configuration* get(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
get	src/util/easylogging++.h	/^    inline T_Ptr* get(const T& arg1, const T2 arg2) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
get	src/util/easylogging++.h	/^    inline T_Ptr* get(const T_Key& uniqKey) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
getBashOutput	src/util/easylogging++.h	/^    static const std::string getBashOutput(const char* command) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
getConfigByRef	src/util/easylogging++.h	/^    inline Conf_T& getConfigByRef(Level level, std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
getConfigByVal	src/util/easylogging++.h	/^    inline Conf_T getConfigByVal(Level level, const std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
getContainer	src/util/easylogging++.h	/^    inline Container& getContainer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterablePriorityQueue
getContainer	src/util/easylogging++.h	/^    inline Container& getContainer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableQueue
getContainer	src/util/easylogging++.h	/^    inline Container& getContainer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableStack
getCounter	src/util/easylogging++.h	/^    inline const base::HitCounter* getCounter(const char* filename, unsigned long int lineNumber) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::RegisteredHitCounters
getCurrentThreadId	src/util/easylogging++.h	/^static inline std::string getCurrentThreadId(void) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
getDeviceName	src/util/easylogging++.h	/^    static std::string getDeviceName(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
getFragments	src/system/System.cpp	/^vector<Fragment*> System::getFragments() { return fragmentMgr->getFragments(); }$/;"	f	class:ts::system::System
getFragments	src/system/fragment/FragmentMgr.cpp	/^vector<Fragment*> FragmentMgr::getFragments() {$/;"	f	class:ts::system::FragmentMgr
getFragments	src/system/fragment/FragmentMgr.cpp	/^vector<WorkFragment> FragmentMgr::getFragments(int) {$/;"	f	class:ts::system::FragmentMgr
getLastState	src/types/Fragment.cpp	/^Fragment* Fragment::getLastState() {$/;"	f	class:ts::type::Fragment
getLatestStack	src/util/easylogging++.h	/^    inline std::vector<StackTraceEntry>& getLatestStack(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
getLogger	src/util/easylogging++.h	/^    static inline Logger* getLogger(const std::string& identity, bool registerIfNotAvailable = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
getNodeID	src/system/message/MessageMgr.h	/^  NodeID getNodeID() { return id; }$/;"	f	class:ts::system::MessageMgr
getNumber	tests/fragment.h	/^  char getNumber() { return n; }$/;"	f	class:ReduceData
getParamValue	src/util/easylogging++.h	/^    inline const char* getParamValue(const char* paramKey) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
getProperty	src/util/easylogging++.h	/^    static inline std::string getProperty(const char* prop) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
getRank	src/system/message/comm/Comm.h	/^  int getRank() const {$/;"	f	class:ts::system::Comm
getSize	src/system/message/comm/Comm.h	/^  int getSize() const {$/;"	f	class:ts::system::Comm
getSizeOfFile	src/util/easylogging++.h	/^    static std::size_t getSizeOfFile(base::type::fstream_t* fs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
getState	src/types/Fragment.cpp	/^Fragment* Fragment::getState(const Timestamp& timestamp, const ID& neighbour) {$/;"	f	class:ts::type::Fragment
getULong	src/util/easylogging++.h	/^    unsigned long getULong(std::string confVal) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
getWindowsEnvironmentVariable	src/util/easylogging++.h	/^    static const char* getWindowsEnvironmentVariable(const char* varname) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
gettimeofday	src/util/easylogging++.h	/^    static void gettimeofday(struct timeval* tv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
give_advice	missing	/^give_advice ()$/;"	f
globalReduceListener	src/system/exec/ExecMgr.h	/^  Listener globalReduceListener; \/\/\/< Global reduce step listener$/;"	m	class:ts::system::ExecMgr
handle	src/util/easylogging++.h	/^    void handle(const LogDispatchData* data) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
handle	src/util/easylogging++.h	/^    void handle(const PerformanceTrackingData* data) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTracker::DefaultPerformanceTrackingCallback
has	src/util/easylogging++.h	/^    inline bool has(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
hasConfiguration	src/util/easylogging++.h	/^    bool hasConfiguration(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
hasConfiguration	src/util/easylogging++.h	/^    inline bool hasConfiguration(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
hasCustomFormatSpecifier	src/util/easylogging++.h	/^    inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
hasCustomFormatSpecifier	src/util/easylogging++.h	/^    static inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
hasFlag	src/util/easylogging++.h	/^    inline bool hasFlag(LoggingFlag flag) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
hasFlag	src/util/easylogging++.h	/^    inline bool hasFlag(base::FormatFlags flag) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
hasFlag	src/util/easylogging++.h	/^    static inline bool hasFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
hasFlag	src/util/easylogging++.h	/^static inline bool hasFlag(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
hasLogger	src/util/easylogging++.h	/^    static inline bool hasLogger(const std::string& identity) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
hasParam	src/util/easylogging++.h	/^    inline bool hasParam(const char* paramKey) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
hasParamWithValue	src/util/easylogging++.h	/^    inline bool hasParamWithValue(const char* paramKey) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
hasState	src/types/Fragment.cpp	/^bool Fragment::hasState(const Timestamp& timestamp) {$/;"	f	class:ts::type::Fragment
hitCounters	src/util/easylogging++.h	/^    inline base::RegisteredHitCounters* hitCounters(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
hitCounts	src/util/easylogging++.h	/^    inline std::size_t hitCounts(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
id	src/system/System.cpp	/^uint64_t System::id() {$/;"	f	class:ts::system::System
id	src/system/action/actions/ConfirmMove.h	/^  ts::type::ID id;$/;"	m	class:ts::system::action::ConfirmMove
id	src/system/action/actions/StartMove.h	/^  ts::type::ID id;$/;"	m	class:ts::system::action::StartMove
id	src/system/message/MessageMgr.h	/^  size_t id;$/;"	m	class:ts::system::MessageMgr
id	src/types/Fragment.cpp	/^ID Fragment::id() { return _vid; }$/;"	f	class:ts::type::Fragment
id	src/types/util/FragmentDeserializer.cpp	/^void FragmentDeserializer::id(Fragment* fragment, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentDeserializer
id	src/types/util/FragmentSerializer.cpp	/^void FragmentSerializer::id(Fragment* fragment, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentSerializer
id	src/util/easylogging++.h	/^    inline const std::string& id(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
ignoreComments	src/util/easylogging++.h	/^        static void ignoreComments(std::string* line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
increment	src/util/easylogging++.h	/^    inline void increment(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init	src/util/easylogging++.h	/^    inline void init(base::PerformanceTracker* performanceTracker, bool firstCheckpoint = false) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
init	src/util/easylogging++.h	/^    void init(int width) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
initUnflushedCount	src/util/easylogging++.h	/^    void initUnflushedCount(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
initialize	src/util/easylogging++.h	/^    void initialize(Logger* logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
inputReduceData	src/system/System.h	/^  size_t inputReduceData;$/;"	m	class:ts::system::System
insertFile	src/util/easylogging++.h	/^    void insertFile(Level level, const std::string& fullFilename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
installCustomFormatSpecifier	src/util/easylogging++.h	/^    inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
installCustomFormatSpecifier	src/util/easylogging++.h	/^    static inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
installLogDispatchCallback	src/util/easylogging++.h	/^    inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
installLogDispatchCallback	src/util/easylogging++.h	/^    static inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
installPerformanceTrackingCallback	src/util/easylogging++.h	/^    inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
installPerformanceTrackingCallback	src/util/easylogging++.h	/^    static inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
installPreRollOutCallback	src/util/easylogging++.h	/^    static inline void installPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/yoba\/code\/testing-system\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
internal	src/util/easylogging++.h	/^namespace internal {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
invert	src/system/util/Listener.cpp	/^void ts::system::Listener::invert() {$/;"	f	class:ts::system::Listener
iprobeAny	src/system/message/comm/Comm.cpp	/^bool Comm::iprobeAny(size_t& size, unsigned int& tag, int& node) {$/;"	f	class:ts::system::Comm
isComment	src/util/easylogging++.h	/^        static inline bool isComment(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
isConfig	src/util/easylogging++.h	/^        static inline bool isConfig(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
isDigit	src/util/easylogging++.h	/^    static inline bool isDigit(char c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
isEnd	src/types/Fragment.cpp	/^bool Fragment::isEnd() {$/;"	f	class:ts::type::Fragment
isFlushNeeded	src/util/easylogging++.h	/^    inline bool isFlushNeeded(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
isLevel	src/util/easylogging++.h	/^        static inline bool isLevel(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
isNeighbour	src/types/Fragment.cpp	/^bool Fragment::isNeighbour(const ID& id) {$/;"	f	class:ts::type::Fragment
isValidId	src/util/easylogging++.h	/^    static inline bool isValidId(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
isend	src/system/message/comm/Comm.cpp	/^unsigned int Comm::isend(const void *buf, const size_t& buf_size, const unsigned int& tag, const int& dest_rank) {$/;"	f	class:ts::system::Comm
iter	tests/fragment.h	/^  uint64_t iter;$/;"	m	class:Fragment
iteration	src/types/Fragment.cpp	/^uint64_t Fragment::iteration() {$/;"	f	class:ts::type::Fragment
iteration	src/types/Fragment.cpp	/^void Fragment::iteration(uint64_t i) {$/;"	f	class:ts::type::Fragment
iterator	src/util/easylogging++.h	/^    typedef typename Container::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
iterator	src/util/easylogging++.h	/^    typedef typename Container::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableContainer
iterator	src/util/easylogging++.h	/^    typedef typename Registry<T_Ptr, T_Key>::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
iterator	src/util/easylogging++.h	/^    typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
join	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::join() {$/;"	f	class:ts::system::ExecMgr
join	src/system/message/MessageMgr.cpp	/^void MessageMgr::join() {$/;"	f	class:ts::system::MessageMgr
justcompute	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::justcompute(WorkFragment& fragment) {$/;"	f	class:ts::system::ExecMgr
kAm	src/util/easylogging++.h	/^    static const char* kAm                              =      "AM";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kAppNameFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kAppNameFormatSpecifier          =      ELPP_LITERAL("%app");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationComment	src/util/easylogging++.h	/^    static const char* kConfigurationComment                   =      "##";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationLevel	src/util/easylogging++.h	/^    static const char* kConfigurationLevel                     =      "*";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationLoggerId	src/util/easylogging++.h	/^    static const char* kConfigurationLoggerId                  =      "--";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCrashSignals	src/util/easylogging++.h	/^    } kCrashSignals[] = {$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts	typeref:struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon3
kCrashSignalsCount	src/util/easylogging++.h	/^    static const int kCrashSignalsCount                          =      sizeof(kCrashSignals) \/ sizeof(kCrashSignals[0]);$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCurrentHostFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kCurrentHostFormatSpecifier      =      ELPP_LITERAL("%host");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCurrentUserFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kCurrentUserFormatSpecifier      =      ELPP_LITERAL("%user");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDateTimeFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kDateTimeFormatSpecifier         =      ELPP_LITERAL("%datetime");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDateTimeFormatSpecifierForFilename	src/util/easylogging++.h	/^    static const char* kDateTimeFormatSpecifierForFilename            =      "%datetime";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDays	src/util/easylogging++.h	/^    static const char* kDays[7]                         =      { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDaysAbbrev	src/util/easylogging++.h	/^    static const char* kDaysAbbrev[7]                   =      { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDebugLevelLogValue	src/util/easylogging++.h	/^    static const base::type::char_t* kDebugLevelLogValue    =   ELPP_LITERAL("DEBUG");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultDateTimeFormat	src/util/easylogging++.h	/^    static const char* kDefaultDateTimeFormat           =      "%d\/%M\/%Y %H:%m:%s,%g";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultDateTimeFormatInFilename	src/util/easylogging++.h	/^    static const char* kDefaultDateTimeFormatInFilename =      "%d-%M-%Y_%H-%m";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	src/util/easylogging++.h	/^    static const char* kDefaultLogFile                         =      "logs\/myeasylog.log";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	src/util/easylogging++.h	/^    static const char* kDefaultLogFile                         =      "logs\\\\myeasylog.log";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	src/util/easylogging++.h	/^    static const char* kDefaultLogFile                         =      _ELPP_DEFAULT_LOG_FILE;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFileParam	src/util/easylogging++.h	/^    static const char* kDefaultLogFileParam                    =      "--default-log-file";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLoggerId	src/util/easylogging++.h	/^    static const char* kDefaultLoggerId                        =      "default";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultMillisecondsWidth	src/util/easylogging++.h	/^    static const unsigned int  kDefaultMillisecondsWidth       =      3;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kErrorLevelLogValue	src/util/easylogging++.h	/^    static const base::type::char_t* kErrorLevelLogValue    =   ELPP_LITERAL("ERROR");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFatalLevelLogValue	src/util/easylogging++.h	/^    static const base::type::char_t* kFatalLevelLogValue    =   ELPP_LITERAL("FATAL");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFilePathSeperator	src/util/easylogging++.h	/^    static const char* kFilePathSeperator                      =      "\/";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFilePathSeperator	src/util/easylogging++.h	/^    static const char* kFilePathSeperator                      =      "\\\\";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFormatSpecifierChar	src/util/easylogging++.h	/^    static const char  kFormatSpecifierChar                    =      '%';$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFormatSpecifierCharValue	src/util/easylogging++.h	/^    static const char  kFormatSpecifierCharValue               =      'v';$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kInfoLevelLogValue	src/util/easylogging++.h	/^    static const base::type::char_t* kInfoLevelLogValue     =   ELPP_LITERAL("INFO ");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogFileFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kLogFileFormatSpecifier          =      ELPP_LITERAL("%file");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogFunctionFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kLogFunctionFormatSpecifier      =      ELPP_LITERAL("%func");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogLineFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kLogLineFormatSpecifier          =      ELPP_LITERAL("%line");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogLocationFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kLogLocationFormatSpecifier      =      ELPP_LITERAL("%loc");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLoggerIdFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kLoggerIdFormatSpecifier         =      ELPP_LITERAL("%logger");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLoggingFlagsParam	src/util/easylogging++.h	/^    static const char* kLoggingFlagsParam                      =      "--logging-flags";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxLogPerContainer	src/util/easylogging++.h	/^    static const unsigned int kMaxLogPerContainer              =      100;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxLogPerCounter	src/util/easylogging++.h	/^    static const unsigned int kMaxLogPerCounter                =      100000;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxStack	src/util/easylogging++.h	/^    static const std::size_t kMaxStack = 64;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
kMaxValid	src/util/easylogging++.h	/^    static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(ConfigurationType::MaxLogFileSize);$/;"	m	class:el::Level::ConfigurationType::ConfigurationTypeHelper
kMaxValid	src/util/easylogging++.h	/^    static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Level::Info);$/;"	m	class:el::Level::LevelHelper
kMaxVerboseLevel	src/util/easylogging++.h	/^    static const base::type::VerboseLevel kMaxVerboseLevel     =      9;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMessageFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kMessageFormatSpecifier          =      ELPP_LITERAL("%msg");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMinValid	src/util/easylogging++.h	/^    static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(ConfigurationType::Enabled);$/;"	m	class:el::Level::ConfigurationType::ConfigurationTypeHelper
kMinValid	src/util/easylogging++.h	/^    static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Level::Trace);$/;"	m	class:el::Level::LevelHelper
kMonths	src/util/easylogging++.h	/^    static const char* kMonths[12]                      =      { "January", "February", "March", "Apri", "May", "June", "July", "August",$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMonthsAbbrev	src/util/easylogging++.h	/^    static const char* kMonthsAbbrev[12]                =      { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kNullPointer	src/util/easylogging++.h	/^    static const char* kNullPointer                            =      "nullptr";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPerformanceLoggerId	src/util/easylogging++.h	/^    static const char* kPerformanceLoggerId                    =      "performance";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPerformanceTrackerDefaultLevel	src/util/easylogging++.h	/^    static const Level kPerformanceTrackerDefaultLevel         =      Level::Info;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPm	src/util/easylogging++.h	/^    static const char* kPm                              =      "PM";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSeverityLevelFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kSeverityLevelFormatSpecifier    =      ELPP_LITERAL("%level");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSourceFilenameMaxLength	src/util/easylogging++.h	/^    static const std::size_t kSourceFilenameMaxLength          =      100;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSourceLineMaxLength	src/util/easylogging++.h	/^    static const std::size_t kSourceLineMaxLength              =      10;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kStackStart	src/util/easylogging++.h	/^    static const std::size_t kStackStart = 2;  \/\/ We want to skip c'tor and StackTrace::generateNew()$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
kSysLogLoggerId	src/util/easylogging++.h	/^    static const char* kSysLogLoggerId                         =      "syslog";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kThreadIdFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kThreadIdFormatSpecifier         =      ELPP_LITERAL("%thread");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kTimeFormats	src/util/easylogging++.h	/^    } kTimeFormats[] = {$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts	typeref:struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon2
kTimeFormatsCount	src/util/easylogging++.h	/^    static const int kTimeFormatsCount                           =      sizeof(kTimeFormats) \/ sizeof(kTimeFormats[0]);$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kTraceLevelLogValue	src/util/easylogging++.h	/^    static const base::type::char_t* kTraceLevelLogValue    =   ELPP_LITERAL("TRACE");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kUnknownHost	src/util/easylogging++.h	/^    static const char* kUnknownHost                            =      "unknown-host";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kUnknownUser	src/util/easylogging++.h	/^    static const char* kUnknownUser                            =      "user";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kValidLoggerIdSymbols	src/util/easylogging++.h	/^    static const char* kValidLoggerIdSymbols                   =      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kVerboseLevelFormatSpecifier	src/util/easylogging++.h	/^    static const base::type::char_t* kVerboseLevelFormatSpecifier     =      ELPP_LITERAL("%vlevel");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kVerboseLevelLogValue	src/util/easylogging++.h	/^    static const base::type::char_t* kVerboseLevelLogValue  =   ELPP_LITERAL("VER");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kWarningLevelLogValue	src/util/easylogging++.h	/^    static const base::type::char_t* kWarningLevelLogValue  =   ELPP_LITERAL("WARN ");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kYearBase	src/util/easylogging++.h	/^    static const int kYearBase                          =      1900;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
lastCheckpointTime	src/util/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::lastCheckpointTime() const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
level	src/util/easylogging++.h	/^    inline Level level(void) const { return m_level; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
level	src/util/easylogging++.h	/^    inline Level level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
level	src/util/easylogging++.h	/^    inline Level level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
level	src/util/easylogging++.h	/^    inline base::type::VerboseLevel level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
lib_LTLIBRARIES	Makefile	/^lib_LTLIBRARIES = libts.la$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libts_la_LIBADD	Makefile	/^libts_la_LIBADD =$/;"	m
libts_la_OBJECTS	Makefile	/^libts_la_OBJECTS = $(am_libts_la_OBJECTS)$/;"	m
libts_la_SOURCES	Makefile	/^libts_la_SOURCES = src\/system\/fragment\/FragmentMgr.cpp \\$/;"	m
line	src/util/easylogging++.h	/^    inline unsigned long int line(void) const { return m_line; } \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
line	src/util/easylogging++.h	/^    inline unsigned long int line(void) const { return m_line; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
lineNumber	src/util/easylogging++.h	/^    inline unsigned long int lineNumber(void) const {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
listener	src/system/util/Listener.h	/^  std::condition_variable listener;$/;"	m	struct:ts::system::Listener
listener	src/system/util/Semaphore.h	/^  std::condition_variable listener;$/;"	m	struct:ts::system::Semaphore
localReduceData	src/system/exec/ExecMgr.h	/^  ts::type::ReduceData* localReduceData;$/;"	m	class:ts::system::ExecMgr
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	src/util/RWLock.h	/^  pthread_rwlock_t* lock;$/;"	m	class:ts::RWLock
lock	src/util/easylogging++.h	/^    inline void lock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
log	src/util/easylogging++.h	/^    inline void Logger::log(Level level, const T& log) { $/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Logger
log	src/util/easylogging++.h	/^    virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
log	src/util/easylogging++.h	/^    virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
log	src/util/easylogging++.h	/^    virtual void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
log	src/util/easylogging++.h	/^    void Logger::log(Level level, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Logger
logBuilder	src/util/easylogging++.h	/^    inline LogBuilder* logBuilder(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
logCrashReason	src/util/easylogging++.h	/^    static inline void logCrashReason(int sig, bool stackTraceIfAvailable = false,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
logCrashReason	src/util/easylogging++.h	/^static void logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
logDispatchCallback	src/util/easylogging++.h	/^    inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
logDispatchCallback	src/util/easylogging++.h	/^    static inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
logFlushThreshold	src/util/easylogging++.h	/^    inline std::size_t logFlushThreshold(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
logFormat	src/util/easylogging++.h	/^    inline const base::LogFormat& logFormat(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
logMessage	src/util/easylogging++.h	/^    inline const LogMessage* logMessage(void) const { return m_logMessage; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
logStreamsReference	src/util/easylogging++.h	/^    inline base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
logStreamsReference	src/util/easylogging++.h	/^    static inline const base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
log_	src/util/easylogging++.h	/^    inline void Logger::log_(Level level, int vlevel, const T& log) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Logger
log_	src/util/easylogging++.h	/^    void Logger::log_(Level level, int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Logger
logger	src/util/easylogging++.h	/^    inline Logger* logger(void) const { return m_logger; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
loggerId	src/util/easylogging++.h	/^inline const std::string& PerformanceTrackingData::loggerId(void) const { return m_performanceTracker->m_loggerId; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
loop	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::loop() {$/;"	f	class:ts::system::ExecMgr
loopThread	src/system/exec/ExecMgr.h	/^  std::thread loopThread;$/;"	m	class:ts::system::ExecMgr
ltrim	src/util/easylogging++.h	/^    static inline std::string& ltrim(std::string& str) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
m_addr	src/util/easylogging++.h	/^        std::string m_addr;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_argc	src/util/easylogging++.h	/^    int m_argc;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
m_argv	src/util/easylogging++.h	/^    char** m_argv;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
m_checkpointId	src/util/easylogging++.h	/^    std::string m_checkpointId;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_commandLineArgs	src/util/easylogging++.h	/^    base::utils::CommandLineArgs m_commandLineArgs;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_configurationFile	src/util/easylogging++.h	/^    std::string m_configurationFile;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
m_configurationType	src/util/easylogging++.h	/^        ConfigurationType m_configurationType;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration::Predicate
m_configurationType	src/util/easylogging++.h	/^    ConfigurationType m_configurationType;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
m_configurations	src/util/easylogging++.h	/^    Configurations m_configurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_configurations	src/util/easylogging++.h	/^    Configurations* m_configurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_containerLogSeperator	src/util/easylogging++.h	/^    const base::type::char_t* m_containerLogSeperator;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
m_customFormatSpecifiers	src/util/easylogging++.h	/^    std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_data	src/util/easylogging++.h	/^    const LogDispatchData* m_data;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
m_data	src/util/easylogging++.h	/^    const PerformanceTrackingData* m_data;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTracker::DefaultPerformanceTrackingCallback
m_dataType	src/util/easylogging++.h	/^    PerformanceTrackingData::DataType m_dataType;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_dateTimeFormat	src/util/easylogging++.h	/^    std::string m_dateTimeFormat;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_defaultConfigurations	src/util/easylogging++.h	/^    Configurations m_defaultConfigurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
m_defaultLogBuilder	src/util/easylogging++.h	/^    LogBuilderPtr m_defaultLogBuilder;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
m_demangled	src/util/easylogging++.h	/^        std::string m_demangled;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_dispatchAction	src/util/easylogging++.h	/^    base::DispatchAction m_dispatchAction;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
m_dispatchAction	src/util/easylogging++.h	/^    base::DispatchAction m_dispatchAction;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::LogDispatcher
m_enabled	src/util/easylogging++.h	/^    bool m_enabled;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Callback
m_enabledMap	src/util/easylogging++.h	/^    std::map<Level, bool> m_enabledMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_file	src/util/easylogging++.h	/^    const char* m_file;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_file	src/util/easylogging++.h	/^    std::string m_file;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_fileStreamMap	src/util/easylogging++.h	/^    std::map<Level, base::FileStreamPtr> m_fileStreamMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_filename	src/util/easylogging++.h	/^        const char* m_filename;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter::Predicate
m_filename	src/util/easylogging++.h	/^    const char* m_filename;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
m_filenameMap	src/util/easylogging++.h	/^    std::map<Level, std::string> m_filenameMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_firstCheckpoint	src/util/easylogging++.h	/^    bool m_firstCheckpoint;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_flag	src/util/easylogging++.h	/^        LoggingFlag m_flag;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedAddFlag
m_flag	src/util/easylogging++.h	/^        LoggingFlag m_flag;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedRemoveFlag
m_flags	src/util/easylogging++.h	/^    base::type::EnumType m_flags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_flags	src/util/easylogging++.h	/^    base::type::EnumType m_flags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_format	src/util/easylogging++.h	/^    base::type::string_t m_format;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_formatSpecifier	src/util/easylogging++.h	/^    const char* m_formatSpecifier;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
m_formattedTimeTaken	src/util/easylogging++.h	/^    base::type::string_t m_formattedTimeTaken;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_func	src/util/easylogging++.h	/^    const char* m_func;    $/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_func	src/util/easylogging++.h	/^    std::string m_func;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_handler	src/util/easylogging++.h	/^    Handler m_handler;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
m_hex	src/util/easylogging++.h	/^        std::string m_hex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_hitCounts	src/util/easylogging++.h	/^    std::size_t m_hitCounts;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
m_id	src/util/easylogging++.h	/^    std::string m_id;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_index	src/util/easylogging++.h	/^        std::size_t m_index;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_isConfigured	src/util/easylogging++.h	/^    bool m_isConfigured;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_isFromFile	src/util/easylogging++.h	/^    bool m_isFromFile;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
m_level	src/util/easylogging++.h	/^        Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration::Predicate
m_level	src/util/easylogging++.h	/^    Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
m_level	src/util/easylogging++.h	/^    Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_level	src/util/easylogging++.h	/^    Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_level	src/util/easylogging++.h	/^    base::type::VerboseLevel m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
m_line	src/util/easylogging++.h	/^    unsigned long int m_line;  \/\/ NOLINT$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_line	src/util/easylogging++.h	/^    unsigned long int m_line;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_lineNumber	src/util/easylogging++.h	/^        unsigned long int m_lineNumber;  \/\/ NOLINT$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter::Predicate
m_lineNumber	src/util/easylogging++.h	/^    unsigned long int m_lineNumber;  \/\/ NOLINT$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
m_list	src/util/easylogging++.h	/^    Container m_list;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
m_location	src/util/easylogging++.h	/^        std::string m_location;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_logBuilder	src/util/easylogging++.h	/^    LogBuilderPtr m_logBuilder;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_logDispatchCallbacks	src/util/easylogging++.h	/^    std::map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_logFlushThresholdMap	src/util/easylogging++.h	/^    std::map<Level, std::size_t> m_logFlushThresholdMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_logFormatMap	src/util/easylogging++.h	/^    std::map<Level, base::LogFormat> m_logFormatMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_logMessage	src/util/easylogging++.h	/^    LogMessage m_logMessage;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::LogDispatcher
m_logMessage	src/util/easylogging++.h	/^    LogMessage* m_logMessage;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
m_logStreamsReference	src/util/easylogging++.h	/^    base::LogStreamsReferenceMap m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
m_logStreamsReference	src/util/easylogging++.h	/^    base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_logStreamsReference	src/util/easylogging++.h	/^    base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_logger	src/util/easylogging++.h	/^    Logger* m_logger;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_logger	src/util/easylogging++.h	/^    Logger* m_logger;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
m_loggingLevel	src/util/easylogging++.h	/^    Level m_loggingLevel;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_maxLogFileSizeMap	src/util/easylogging++.h	/^    std::map<Level, std::size_t> m_maxLogFileSizeMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_message	src/util/easylogging++.h	/^    base::type::string_t m_message;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_millisecondsWidthMap	src/util/easylogging++.h	/^    std::map<Level, base::MillisecondsWidth> m_millisecondsWidthMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_modules	src/util/easylogging++.h	/^    std::map<std::string, base::type::VerboseLevel> m_modules;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
m_mutex	src/util/easylogging++.h	/^    M* m_mutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
m_mutex	src/util/easylogging++.h	/^    base::threading::Mutex m_mutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
m_offset	src/util/easylogging++.h	/^    int m_width; unsigned int m_offset;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
m_pFlags	src/util/easylogging++.h	/^    base::type::EnumType* m_pFlags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
m_params	src/util/easylogging++.h	/^    std::vector<std::string> m_params;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
m_paramsWithValue	src/util/easylogging++.h	/^    std::map<std::string, std::string> m_paramsWithValue;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
m_parentApplicationName	src/util/easylogging++.h	/^    std::string m_parentApplicationName;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_performanceTracker	src/util/easylogging++.h	/^    base::PerformanceTracker* m_performanceTracker;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_performanceTrackingCallbacks	src/util/easylogging++.h	/^    std::map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrackingCallbacks;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_performanceTrackingMap	src/util/easylogging++.h	/^    std::map<Level, bool> m_performanceTrackingMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_preRollOutCallback	src/util/easylogging++.h	/^    PreRollOutCallback m_preRollOutCallback;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_proceed	src/util/easylogging++.h	/^    bool m_proceed;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::LogDispatcher
m_registeredHitCounters	src/util/easylogging++.h	/^    base::RegisteredHitCounters* m_registeredHitCounters;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_registeredLoggers	src/util/easylogging++.h	/^    base::RegisteredLoggers* m_registeredLoggers;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_resolver	src/util/easylogging++.h	/^    FormatSpecifierValueResolver m_resolver;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
m_stack	src/util/easylogging++.h	/^    std::vector<StackTraceEntry> m_stack;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
m_stream	src/util/easylogging++.h	/^    base::type::stringstream_t m_stream;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_toFileMap	src/util/easylogging++.h	/^    std::map<Level, bool> m_toFileMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_toStandardOutputMap	src/util/easylogging++.h	/^    std::map<Level, bool> m_toStandardOutputMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_typedConfigurations	src/util/easylogging++.h	/^    base::TypedConfigurations* m_typedConfigurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_underlyingMutex	src/util/easylogging++.h	/^    CRITICAL_SECTION m_underlyingMutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
m_underlyingMutex	src/util/easylogging++.h	/^    pthread_mutex_t m_underlyingMutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
m_unflushedCount	src/util/easylogging++.h	/^    std::map<Level, unsigned int> m_unflushedCount;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_userFormat	src/util/easylogging++.h	/^    base::type::string_t m_userFormat;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_vRegistry	src/util/easylogging++.h	/^    base::VRegistry* m_vRegistry;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_value	src/util/easylogging++.h	/^    std::string m_value;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
m_verboseLevel	src/util/easylogging++.h	/^    base::type::VerboseLevel m_verboseLevel;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_width	src/util/easylogging++.h	/^    int m_width; unsigned int m_offset;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	config.guess	/^main ()$/;"	f
main	tests/main.cpp	/^int main() {$/;"	f
main	tests/serialize.cpp	/^int main() {$/;"	f
make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	f
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
maxLogFileSize	src/util/easylogging++.h	/^    inline std::size_t maxLogFileSize(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
max_request_id	src/system/message/comm/Comm.h	/^  unsigned int max_request_id;$/;"	m	class:ts::system::Comm
message	src/util/easylogging++.h	/^    inline const base::type::string_t& message(void) const { return m_message; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
messageMgr	src/system/fragment/FragmentMgr.h	/^    MessageMgr* messageMgr;$/;"	m	class:ts::system::FragmentMgr
millisecondsWidth	src/util/easylogging++.h	/^    inline const base::MillisecondsWidth& millisecondsWidth(Level level = Level::Global) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
modules	src/util/easylogging++.h	/^    inline const std::map<std::string, base::type::VerboseLevel>& modules(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
moveFragment	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::moveFragment(Fragment* fragment) {$/;"	f	class:ts::system::FragmentMgr
moveFragmentAccept	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::moveFragmentAccept(const ts::type::ID& id, NodeID nid) {$/;"	f	class:ts::system::FragmentMgr
moveList	src/system/fragment/FragmentMgr.h	/^    std::map<ts::type::ID, NodeID> moveList;$/;"	m	class:ts::system::FragmentMgr
moveStates	src/types/Fragment.cpp	/^void Fragment::moveStates(Fragment* fragment) {$/;"	f	class:ts::type::Fragment
movingFragmentAccept	src/system/fragment/FragmentMgr.h	/^    std::map<ts::type::ID, std::vector<NodeID>> movingFragmentAccept;$/;"	m	class:ts::system::FragmentMgr
msgMgr	src/system/System.h	/^  MessageMgr* msgMgr;$/;"	m	class:ts::system::System
mutex	src/system/util/Listener.h	/^  std::mutex mutex;$/;"	m	struct:ts::system::Listener
mutex	src/system/util/Semaphore.h	/^  std::mutex mutex;$/;"	m	struct:ts::system::Semaphore
n	tests/fragment.h	/^  char n;$/;"	m	class:ReduceData
name	src/util/easylogging++.h	/^        const char* name;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon3
needNeighbours	src/types/Fragment.cpp	/^bool Fragment::needNeighbours() {$/;"	f	class:ts::type::Fragment
needReduce	src/types/Fragment.cpp	/^bool Fragment::needReduce() { return _vreduce;  }$/;"	f	class:ts::type::Fragment
needUpdate	src/types/Fragment.cpp	/^bool Fragment::needUpdate() { return _vupdate; }$/;"	f	class:ts::type::Fragment
neighbours	src/types/Fragment.cpp	/^vector<ID> Fragment::neighbours() {$/;"	f	class:ts::type::Fragment
neighbours	src/types/Fragment.cpp	/^vector<ID> Fragment::neighbours(NodeID node) {$/;"	f	class:ts::type::Fragment
neighbours	src/types/util/FragmentDeserializer.cpp	/^void FragmentDeserializer::neighbours(Fragment* fragment, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentDeserializer
neighbours	src/types/util/FragmentSerializer.cpp	/^void FragmentSerializer::neighbours(Fragment* fragment, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentSerializer
neighboursState	src/types/Fragment.cpp	/^Timestamp Fragment::neighboursState() {$/;"	f	class:ts::type::Fragment
newFileStream	src/util/easylogging++.h	/^    static base::type::fstream_t* newFileStream(const std::string& filename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
nextIteration	src/types/Fragment.cpp	/^void Fragment::nextIteration() {$/;"	f	class:ts::type::Fragment
node	src/system/action/actions/StartMove.h	/^  NodeID node;$/;"	m	class:ts::system::action::StartMove
node	src/system/message/MessageMgr.h	/^  NodeID node;$/;"	m	struct:ts::system::Message
nodesNumber	src/distr/Distributor.h	/^  size_t nodesNumber;$/;"	m	class:ts::distr::Distributor
noticeList	src/types/Fragment.cpp	/^set<NodeID> Fragment::noticeList() {$/;"	f	class:ts::type::Fragment
notify	src/system/System.cpp	/^void System::notify() {$/;"	f	class:ts::system::System
notifyAll	src/system/util/Listener.cpp	/^void ts::system::Listener::notifyAll() {$/;"	f	class:ts::system::Listener
notifyAll	src/system/util/Semaphore.cpp	/^void ts::system::Semaphore::notifyAll() {$/;"	f	class:ts::system::Semaphore
notifyOne	src/system/util/Listener.cpp	/^void ts::system::Listener::notifyOne() {$/;"	f	class:ts::system::Listener
notifyOne	src/system/util/Semaphore.cpp	/^void ts::system::Semaphore::notifyOne() {$/;"	f	class:ts::system::Semaphore
numb	src/util/easylogging++.h	/^        int numb;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon3
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
operator !=	src/util/easylogging++.h	/^    bool operator!=(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
operator ()	src/util/easylogging++.h	/^        inline bool operator()(const Configuration* conf) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration::Predicate
operator ()	src/util/easylogging++.h	/^        inline bool operator()(const HitCounter* counter) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter::Predicate
operator <	src/types/ID.cpp	/^bool ID::operator<(const ID& other) const {$/;"	f	class:ts::type::ID
operator <<	src/util/Arc.h	/^  Arc& operator<< (const T& something) {$/;"	f	class:ts::Arc
operator <<	src/util/easylogging++.h	/^        friend std::ostream& operator<<(std::ostream& ss, const StackTraceEntry& si) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
operator <<	src/util/easylogging++.h	/^    friend inline base::type::ostream_t& operator<<(base::type::ostream_t& os, const RegistryWithPred& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
operator <<	src/util/easylogging++.h	/^    friend inline el::base::type::ostream_t& operator<<(el::base::type::ostream_t& os, const Loggable& loggable) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Loggable
operator <<	src/util/easylogging++.h	/^    friend inline std::ostream& operator<<(std::ostream& os, const StackTrace& st) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(QChar msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QByteArray& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QHash<K, V>& hash_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QLatin1String& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QMap<K, V>& map_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QMultiHash<K, V>& multiHash_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QMultiMap<K, V>& map_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QPair<First, Second>& pair_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QString& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const QStringRef& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::array<T, Size>& array) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::bitset<Size>& bitset_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::pair<First, Second>& pair_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::priority_queue<T, Container, Comparator>& priorityQueue_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::queue<T, Container>& queue_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::stack<T, Container>& stack_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::string& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::wstring& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(const wchar_t* msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(qint64 msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline MessageBuilder& operator<<(quint64 msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
operator <<	src/util/easylogging++.h	/^    inline NullWriter& operator<<(const T&) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::NullWriter
operator <<	src/util/easylogging++.h	/^    inline NullWriter& operator<<(std::ostream& (*)(std::ostream&)) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::NullWriter
operator <<	src/util/easylogging++.h	/^    inline Writer& operator<<(const T& log) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Writer
operator <<	src/util/easylogging++.h	/^    inline friend base::type::ostream_t& operator<<(base::type::ostream_t& os, const CommandLineArgs& c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
operator =	src/util/easylogging++.h	/^    AbstractRegistry& operator=(AbstractRegistry&& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
operator =	src/util/easylogging++.h	/^    Configuration& operator=(const Configuration& c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
operator =	src/util/easylogging++.h	/^    HitCounter& operator=(const HitCounter& hitCounter) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
operator =	src/util/easylogging++.h	/^    LogFormat& operator=(const LogFormat& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
operator =	src/util/easylogging++.h	/^    Logger& operator=(const Logger& logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
operator =	src/util/easylogging++.h	/^    Registry& operator=(const Registry& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
operator =	src/util/easylogging++.h	/^    RegistryWithPred& operator=(const RegistryWithPred& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
operator ==	src/types/Fragment.cpp	/^bool Fragment::operator==(const Fragment& other) { return _vid == other._vid; }$/;"	f	class:ts::type::Fragment
operator ==	src/types/Fragment.cpp	/^bool Fragment::operator==(const ID& other) { return _vid == other; }$/;"	f	class:ts::type::Fragment
operator ==	src/types/ID.cpp	/^bool ID::operator==(const ID& other) const {$/;"	f	class:ts::type::ID
operator ==	src/util/easylogging++.h	/^    bool operator==(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
operator ==	src/util/easylogging++.h	/^    bool operator==(const MillisecondsWidth& msWidth) { return m_width == msWidth.m_width && m_offset == msWidth.m_offset; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
operator ==	src/util/easylogging++.h	/^    inline bool operator==(const LogFormat& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
operator ==	src/util/easylogging++.h	/^    inline bool operator==(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
operator >	src/types/ID.cpp	/^bool ID::operator>(const ID& other) const {$/;"	f	class:ts::type::ID
operator >>	src/util/Arc.h	/^  Arc& operator>> (T& something) {$/;"	f	class:ts::Arc
ostream_t	src/util/easylogging++.h	/^typedef std::wostream ostream_t;$/;"	t	namespace:el::base::type
override	src/system/action/actions/ConfirmMove.h	/^  Action* copy() override;$/;"	m	class:ts::system::action::ConfirmMove
override	src/system/action/actions/ConfirmMove.h	/^  void run() override;$/;"	m	class:ts::system::action::ConfirmMove
override	src/system/action/actions/ConfirmMove.h	/^  void set(ts::Arc* arc, ts::type::NodeID id) override;$/;"	m	class:ts::system::action::ConfirmMove
override	src/system/action/actions/Move.h	/^  Action* copy() override;$/;"	m	class:ts::system::action::Move
override	src/system/action/actions/Move.h	/^  void run() override;$/;"	m	class:ts::system::action::Move
override	src/system/action/actions/Move.h	/^  void set(ts::Arc* arc, ts::type::NodeID id) override;$/;"	m	class:ts::system::action::Move
override	src/system/action/actions/Reduce.h	/^  Action* copy() override;$/;"	m	class:ts::system::action::Reduce
override	src/system/action/actions/Reduce.h	/^  void run() override;$/;"	m	class:ts::system::action::Reduce
override	src/system/action/actions/Reduce.h	/^  void set(ts::Arc* arc, ts::type::NodeID id) override;$/;"	m	class:ts::system::action::Reduce
override	src/system/action/actions/StartMove.h	/^  Action* copy() override;$/;"	m	class:ts::system::action::StartMove
override	src/system/action/actions/StartMove.h	/^  void run() override;$/;"	m	class:ts::system::action::StartMove
override	src/system/action/actions/StartMove.h	/^  void set(ts::Arc* arc, ts::type::NodeID id) override;$/;"	m	class:ts::system::action::StartMove
override	src/system/action/actions/Update.h	/^  Action* copy() override;$/;"	m	class:ts::system::action::Update
override	src/system/action/actions/Update.h	/^  void run() override;$/;"	m	class:ts::system::action::Update
override	src/system/action/actions/Update.h	/^  void set(ts::Arc* arc, ts::type::NodeID id) override;$/;"	m	class:ts::system::action::Update
parentApplicationName	src/util/easylogging++.h	/^    inline const std::string& parentApplicationName(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
parseFromFile	src/util/easylogging++.h	/^        static bool parseFromFile(const std::string& configurationFile, Configurations* sender, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
parseFromFile	src/util/easylogging++.h	/^    inline bool parseFromFile(const std::string& configurationFile, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
parseFromFormat	src/util/easylogging++.h	/^    void parseFromFormat(const base::type::string_t& userFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
parseFromText	src/util/easylogging++.h	/^        static bool parseFromText(const std::string& configurationsString, Configurations* sender, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
parseFromText	src/util/easylogging++.h	/^    inline bool parseFromText(const std::string& configurationsString, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
parseLine	src/util/easylogging++.h	/^        static bool parseLine(std::string* line, std::string* currConfigStr, std::string* currLevelStr, Level* currLevel, Configurations* conf) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
pathExists	src/util/easylogging++.h	/^    static inline bool pathExists(const char* path, bool considerFile = false) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
performanceTracker	src/util/easylogging++.h	/^    inline const base::PerformanceTracker* performanceTracker(void) const { return m_performanceTracker; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::DataType
performanceTracking	src/util/easylogging++.h	/^    inline bool performanceTracking(Level level = Level::Global) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
performanceTrackingCallback	src/util/easylogging++.h	/^    inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
performanceTrackingCallback	src/util/easylogging++.h	/^    static inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/ts$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/ts$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/ts$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/ts$/;"	m
pop	src/system/message/MessageMgr.cpp	/^Message* MessageMgr::pop() {$/;"	f	class:ts::system::MessageMgr
populateAllLoggerIds	src/util/easylogging++.h	/^    static inline std::vector<std::string>* populateAllLoggerIds(std::vector<std::string>* targetList) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
preRollOutCallback	src/util/easylogging++.h	/^    inline PreRollOutCallback& preRollOutCallback(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
prefix	Makefile	/^prefix = \/home\/yoba\/local\/ts$/;"	m
print	src/types/Fragment.cpp	/^void Fragment::print() {$/;"	f	class:ts::type::Fragment
printStates	src/types/Fragment.cpp	/^  void Fragment::printStates() {$/;"	f	class:ts::type::Fragment
program_details	missing	/^program_details ()$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
progress	src/types/Fragment.cpp	/^uint64_t Fragment::progress() {$/;"	f	class:ts::type::Fragment
progress	src/types/Fragment.cpp	/^void Fragment::progress(uint64_t p) {$/;"	f	class:ts::type::Fragment
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	Makefile	/^psdir = ${docdir}$/;"	m
push	src/system/message/MessageMgr.cpp	/^void MessageMgr::push(Message* message) {$/;"	f	class:ts::system::MessageMgr
putReduceData	src/system/System.cpp	/^void System::putReduceData(ts::type::ReduceData* data) {$/;"	f	class:ts::system::System
queueListener	src/system/exec/ExecMgr.h	/^  Listener queueListener; \/\/\/< Queue listener$/;"	m	class:ts::system::ExecMgr
queueMutex	src/system/System.h	/^  std::mutex queueMutex;$/;"	m	class:ts::system::System
queueMutex	src/system/exec/ExecMgr.h	/^  std::mutex queueMutex;$/;"	m	class:ts::system::ExecMgr
queueMutex	src/system/message/MessageMgr.h	/^  std::mutex queueMutex;$/;"	m	class:ts::system::MessageMgr
rank	src/distr/Distributor.h	/^  size_t rank;$/;"	m	class:ts::distr::Distributor
rank	src/system/message/comm/Comm.h	/^  int rank;$/;"	m	class:ts::system::Comm
raw	src/util/Arc.h	/^  std::stringstream raw;$/;"	m	class:ts::Arc
receiveLoop	src/system/message/MessageMgr.cpp	/^void MessageMgr::receiveLoop() {$/;"	f	class:ts::system::MessageMgr
receiver	src/system/message/MessageMgr.h	/^  std::thread receiver;$/;"	m	class:ts::system::MessageMgr
reconfigure	src/util/easylogging++.h	/^    inline void reconfigure(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
reconfigureAllLoggers	src/util/easylogging++.h	/^    static inline void reconfigureAllLoggers(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureAllLoggers	src/util/easylogging++.h	/^    static inline void reconfigureAllLoggers(Level level, ConfigurationType configurationType, $/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureAllLoggers	src/util/easylogging++.h	/^    static inline void reconfigureAllLoggers(const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureLogger	src/util/easylogging++.h	/^    static inline Logger* reconfigureLogger(Logger* logger, const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureLogger	src/util/easylogging++.h	/^    static inline Logger* reconfigureLogger(const std::string& identity, ConfigurationType configurationType,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureLogger	src/util/easylogging++.h	/^    static inline Logger* reconfigureLogger(const std::string& identity, const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
recv	src/system/message/comm/Comm.cpp	/^void Comm::recv(void *buf, const size_t& buf_size, const unsigned int& tag, const int& src_rank) {$/;"	f	class:ts::system::Comm
reduce	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::reduce(ReduceData* rdata) {$/;"	f	class:ts::system::ExecMgr
reduce	tests/fragment.h	/^  ts::type::ReduceData* reduce(ts::type::ReduceData* d1,$/;"	f	class:ReduceDataTools
reduceDataTools	src/system/action/Action.h	/^  ts::type::ReduceDataTools* reduceDataTools;$/;"	m	class:ts::system::Action
reduceDataTools	src/system/action/ActionBuilder.h	/^  ts::type::ReduceDataTools* reduceDataTools;$/;"	m	class:ts::system::ActionBuilder
reduceTool	src/system/message/MessageMgr.h	/^  ts::type::ReduceDataTools* reduceTool;$/;"	m	class:ts::system::MessageMgr
reduceTools	src/system/exec/ExecMgr.h	/^  ts::type::ReduceDataTools* reduceTools;$/;"	m	class:ts::system::ExecMgr
registeredLoggers	src/util/easylogging++.h	/^    inline base::RegisteredLoggers* registeredLoggers(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
reinitDeepCopy	src/util/easylogging++.h	/^    void reinitDeepCopy(const AbstractRegistry<T_Ptr, Container>& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
releaseDate	src/util/easylogging++.h	/^    static inline const std::string releaseDate(void) { return std::string("25-04-2014 1619hrs"); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::VersionInfo
remove	src/util/easylogging++.h	/^    bool remove(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
removeFlag	src/util/easylogging++.h	/^    inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
removeFlag	src/util/easylogging++.h	/^    static inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
removeFlag	src/util/easylogging++.h	/^static inline void removeFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
replaceAll	src/util/easylogging++.h	/^    static inline std::string& replaceAll(std::string& str, char replaceWhat, char replaceWith) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
replaceAll	src/util/easylogging++.h	/^    static inline std::string& replaceAll(std::string& str, const std::string& replaceWhat, \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
replaceFirstWithEscape	src/util/easylogging++.h	/^    static void replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& replaceWhat, \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
requests	src/system/message/comm/Comm.h	/^  std::map<unsigned int, MPI_Request> requests;$/;"	m	class:ts::system::Comm
resetLocation	src/util/easylogging++.h	/^    inline void resetLocation(const char* filename, unsigned long int lineNumber) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
resolveFilename	src/util/easylogging++.h	/^    std::string resolveFilename(const std::string& filename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
resolveLoggerFormatSpec	src/util/easylogging++.h	/^    void resolveLoggerFormatSpec(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
resolver	src/util/easylogging++.h	/^    inline const FormatSpecifierValueResolver& resolver(void) const { return m_resolver; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
rlock	src/util/RWLock.cpp	/^void RWLock::rlock() {$/;"	f	class:ts::RWLock
rlock	src/util/RWLock.cpp	/^void RWLock::rlock(std::function<void(void)> f) {$/;"	f	class:ts::RWLock
rstate	src/system/exec/ExecMgr.h	/^  std::atomic<ReduceState> rstate;$/;"	m	class:ts::system::ExecMgr
rtrim	src/util/easylogging++.h	/^    static inline std::string& rtrim(std::string& str) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
run	src/system/System.cpp	/^void System::run() {$/;"	f	class:ts::system::System
run	src/system/action/actions/ConfirmMove.cpp	/^void ConfirmMove::run()  {$/;"	f	class:ts::system::action::ConfirmMove
run	src/system/action/actions/Move.cpp	/^  void Move::run() {$/;"	f	class:ts::system::action::Move
run	src/system/action/actions/Reduce.cpp	/^void Reduce::run() {$/;"	f	class:ts::system::action::Reduce
run	src/system/action/actions/StartMove.cpp	/^void StartMove::run()  {$/;"	f	class:ts::system::action::StartMove
run	src/system/action/actions/Update.cpp	/^void Update::run() {$/;"	f	class:ts::system::action::Update
run	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::run() {$/;"	f	class:ts::system::ExecMgr
run	src/system/message/MessageMgr.cpp	/^void MessageMgr::run() {$/;"	f	class:ts::system::MessageMgr
safeDelete	src/util/easylogging++.h	/^static inline safeDelete(T*& pointer) {  \/\/ NOLINT$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
saveState	src/types/Fragment.cpp	/^void Fragment::saveState() {$/;"	f	class:ts::type::Fragment
saveState	src/types/Fragment.cpp	/^void Fragment::saveState(Fragment* fragment) {$/;"	f	class:ts::type::Fragment
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
send	src/system/message/comm/Comm.cpp	/^void Comm::send(const void *buf, const size_t& buf_size, const unsigned int& tag, const int& dest_rank) {$/;"	f	class:ts::system::Comm
sendBoundary	src/system/message/MessageMgr.cpp	/^void MessageMgr::sendBoundary(NodeID node, Fragment* fragment) {$/;"	f	class:ts::system::MessageMgr
sendConfirmMove	src/system/message/MessageMgr.cpp	/^void MessageMgr::sendConfirmMove(NodeID node, const ts::type::ID& id) {$/;"	f	class:ts::system::MessageMgr
sendFullFragment	src/system/message/MessageMgr.cpp	/^void MessageMgr::sendFullFragment(NodeID node, Fragment* fragment) {$/;"	f	class:ts::system::MessageMgr
sendLoop	src/system/message/MessageMgr.cpp	/^void MessageMgr::sendLoop() {$/;"	f	class:ts::system::MessageMgr
sendQueue	src/system/message/MessageMgr.h	/^  std::queue<Message*> sendQueue;$/;"	m	class:ts::system::MessageMgr
sendReduce	src/system/message/MessageMgr.cpp	/^void MessageMgr::sendReduce(ReduceData* reduceData) {$/;"	f	class:ts::system::MessageMgr
sendStartMove	src/system/message/MessageMgr.cpp	/^void MessageMgr::sendStartMove(NodeID node, const ts::type::ID& id, NodeID to) {$/;"	f	class:ts::system::MessageMgr
sender	src/system/action/actions/ConfirmMove.h	/^  NodeID sender;$/;"	m	class:ts::system::action::ConfirmMove
sender	src/system/action/actions/StartMove.h	/^  NodeID sender;$/;"	m	class:ts::system::action::StartMove
sender	src/system/message/MessageMgr.h	/^  std::thread sender;$/;"	m	class:ts::system::MessageMgr
serialize	src/types/ID.cpp	/^void ID::serialize(ts::Arc* arc) const {$/;"	f	class:ts::type::ID
serialize	tests/fragment.h	/^  ts::Arc* serialize(ts::type::ReduceData* data) {$/;"	f	class:ReduceDataTools
serialize	tests/fragment.h	/^  void serialize(ts::type::Fragment* fragment, ts::Arc* arc) {$/;"	f	class:FragmentTools
set	src/system/action/actions/ConfirmMove.cpp	/^void ConfirmMove::set(ts::Arc* arc, ts::type::NodeID _sender) {$/;"	f	class:ts::system::action::ConfirmMove
set	src/system/action/actions/Move.cpp	/^  void Move::set(ts::Arc* arc, ts::type::NodeID) {$/;"	f	class:ts::system::action::Move
set	src/system/action/actions/Reduce.cpp	/^void Reduce::set(ts::Arc* arc, ts::type::NodeID) {$/;"	f	class:ts::system::action::Reduce
set	src/system/action/actions/StartMove.cpp	/^void StartMove::set(ts::Arc* arc, ts::type::NodeID _sender) {$/;"	f	class:ts::system::action::StartMove
set	src/system/action/actions/Update.cpp	/^void Update::set(ts::Arc* arc, ts::type::NodeID) {$/;"	f	class:ts::system::action::Update
set	src/util/easylogging++.h	/^    inline void set(Configuration* conf) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
set	src/util/easylogging++.h	/^    inline void set(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setActionBuilder	src/system/message/MessageMgr.h	/^  void setActionBuilder(ActionBuilder* ab) { actionBuilder = ab; }$/;"	f	class:ts::system::MessageMgr
setApplicationArguments	src/util/easylogging++.h	/^    void setApplicationArguments(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
setArgs	src/util/easylogging++.h	/^    inline void setArgs(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
setArgs	src/util/easylogging++.h	/^    inline void setArgs(int argc, const char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
setArgs	src/util/easylogging++.h	/^    static inline void setArgs(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
setArgs	src/util/easylogging++.h	/^    static inline void setArgs(int argc, const char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
setCrashHandler	src/util/easylogging++.h	/^    static inline void setCrashHandler(const el::base::debug::CrashHandler::Handler& crashHandler) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
setDefaultConfigurations	src/util/easylogging++.h	/^    inline void setDefaultConfigurations(const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
setDefaultConfigurations	src/util/easylogging++.h	/^    static inline void setDefaultConfigurations(const Configurations& configurations, bool reconfigureExistingLoggers = false) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
setDispatchAction	src/util/easylogging++.h	/^    inline void setDispatchAction(base::DispatchAction dispatchAction) { m_dispatchAction = dispatchAction; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
setEnabled	src/util/easylogging++.h	/^    inline void setEnabled(bool enabled) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Callback
setEnd	src/types/Fragment.cpp	/^void Fragment::setEnd() {$/;"	f	class:ts::type::Fragment
setExecMgr	src/system/action/Action.cpp	/^void Action::setExecMgr(ExecMgr* _execMgr) {$/;"	f	class:ts::system::Action
setExecMgr	src/system/action/ActionBuilder.cpp	/^void ActionBuilder::setExecMgr(ExecMgr* _execMgr) {$/;"	f	class:ts::system::ActionBuilder
setFlags	src/util/easylogging++.h	/^    inline void setFlags(unsigned int flags) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
setFragmentMgr	src/system/action/Action.cpp	/^void Action::setFragmentMgr(FragmentMgr* _fragmentMgr) {$/;"	f	class:ts::system::Action
setFragmentMgr	src/system/action/ActionBuilder.cpp	/^void ActionBuilder::setFragmentMgr(FragmentMgr* _fragmentMgr) {$/;"	f	class:ts::system::ActionBuilder
setFragmentMgr	src/system/message/MessageMgr.h	/^  void setFragmentMgr(FragmentMgr* mgr) { fragmentMgr = mgr; }$/;"	f	class:ts::system::MessageMgr
setFragmentTool	src/system/message/MessageMgr.h	/^  void setFragmentTool(ts::type::FragmentTools* tool) { fragmentTool = tool; }$/;"	f	class:ts::system::MessageMgr
setFragmentTools	src/system/action/Action.cpp	/^void Action::setFragmentTools(ts::type::FragmentTools* _fragmentTools) {$/;"	f	class:ts::system::Action
setFragmentTools	src/system/action/ActionBuilder.cpp	/^void ActionBuilder::setFragmentTools(ts::type::FragmentTools* _fragmentTools) {$/;"	f	class:ts::system::ActionBuilder
setFragmentTools	src/system/fragment/FragmentMgr.h	/^    void setFragmentTools(type::FragmentTools* _fragmentTools) { fragmentTools = _fragmentTools; }$/;"	f	class:ts::system::FragmentMgr
setFromArgs	src/util/easylogging++.h	/^    void setFromArgs(const base::utils::CommandLineArgs* commandLineArgs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
setFromBase	src/util/easylogging++.h	/^    inline void setFromBase(Configurations* base) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setGlobally	src/util/easylogging++.h	/^    inline void setGlobally(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setGlobally	src/util/easylogging++.h	/^    void setGlobally(ConfigurationType configurationType, const std::string& value, bool includeGlobalLevel) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setHandler	src/util/easylogging++.h	/^    void setHandler(const Handler& cHandler) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
setLevel	src/util/easylogging++.h	/^    inline void setLevel(base::type::VerboseLevel level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
setLogBuilder	src/util/easylogging++.h	/^    inline void setLogBuilder(const LogBuilderPtr& logBuilder) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
setLogMessage	src/util/easylogging++.h	/^    inline void setLogMessage(LogMessage* logMessage) { m_logMessage = logMessage; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
setLoggingLevel	src/util/easylogging++.h	/^    inline void setLoggingLevel(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
setLoggingLevel	src/util/easylogging++.h	/^    static inline void setLoggingLevel(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
setMessageMgr	src/system/fragment/FragmentMgr.h	/^    void setMessageMgr(MessageMgr* mgr) { messageMgr = mgr; }$/;"	f	class:ts::system::FragmentMgr
setModules	src/util/easylogging++.h	/^    void setModules(const char* modules) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
setNeighbours	src/types/Fragment.cpp	/^void Fragment::setNeighbours(uint64_t iteration, uint64_t progress) {$/;"	f	class:ts::type::Fragment
setNodeID	src/types/Fragment.cpp	/^void Fragment::setNodeID(NodeID nodeID) {$/;"	f	class:ts::type::Fragment
setParentApplicationName	src/util/easylogging++.h	/^    inline void setParentApplicationName(const std::string& parentApplicationName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
setPreRollOutCallback	src/util/easylogging++.h	/^    inline void setPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
setReduce	src/types/Fragment.cpp	/^void Fragment::setReduce() {$/;"	f	class:ts::type::Fragment
setReduceDataTools	src/system/action/Action.cpp	/^void Action::setReduceDataTools(ts::type::ReduceDataTools* _reduceDataTools) {$/;"	f	class:ts::system::Action
setReduceDataTools	src/system/action/ActionBuilder.cpp	/^void ActionBuilder::setReduceDataTools(ts::type::ReduceDataTools* _reduceDataTools) {$/;"	f	class:ts::system::ActionBuilder
setReduceTool	src/system/message/MessageMgr.h	/^  void setReduceTool(ts::type::ReduceDataTools* tool) { reduceTool = tool; }$/;"	f	class:ts::system::MessageMgr
setRemainingToDefault	src/util/easylogging++.h	/^    void setRemainingToDefault(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setStorage	src/util/easylogging++.h	/^    static inline void setStorage(base::type::StoragePointer storage) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
setSystem	src/system/action/Action.cpp	/^void Action::setSystem(System* _system) {$/;"	f	class:ts::system::Action
setSystem	src/system/action/ActionBuilder.cpp	/^void ActionBuilder::setSystem(System* _system) {$/;"	f	class:ts::system::ActionBuilder
setSystem	src/system/exec/ExecMgr.h	/^  void setSystem(System* _system) { system = _system; }$/;"	f	class:ts::system::ExecMgr
setSystem	src/system/fragment/FragmentMgr.h	/^    void setSystem(System* _system) { system = _system; }$/;"	f	class:ts::system::FragmentMgr
setSystem	src/system/message/MessageMgr.h	/^  void setSystem(System* _sys) { sys = _sys; }$/;"	f	class:ts::system::MessageMgr
setToDefault	src/util/easylogging++.h	/^    void setToDefault(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setUpdate	src/types/Fragment.cpp	/^void Fragment::setUpdate() {$/;"	f	class:ts::type::Fragment
setValue	src/util/easylogging++.h	/^    inline void setValue(const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
setValue	src/util/easylogging++.h	/^    void setValue(Level level, const Conf_T& value, std::map<Level, Conf_T>* confMap, bool includeGlobalLevel = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
set_base_from	depcomp	/^set_base_from ()$/;"	f
set_dir_from	depcomp	/^set_dir_from ()$/;"	f
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
size	src/system/System.cpp	/^uint64_t System::size() {$/;"	f	class:ts::system::System
size	src/system/message/MessageMgr.h	/^  size_t size() { return _size; }$/;"	f	class:ts::system::MessageMgr
size	src/system/message/MessageMgr.h	/^  size_t size;$/;"	m	struct:ts::system::Message
size	src/system/message/comm/Comm.h	/^  int size;$/;"	m	class:ts::system::Comm
size	src/util/Arc.h	/^  size_t size() {$/;"	f	class:ts::Arc
size	src/util/easylogging++.h	/^    inline std::size_t size(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
specialUpdateNeighbour	src/types/Fragment.cpp	/^vector<Fragment*> Fragment::specialUpdateNeighbour(const ID& neighbour, NodeID node) {$/;"	f	class:ts::type::Fragment
specialUpdateNeighbours	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::specialUpdateNeighbours(const ts::type::ID& id) {$/;"	f	class:ts::system::FragmentMgr
spreadReduceData	src/system/System.cpp	/^void System::spreadReduceData(ts::type::ReduceData* data) {$/;"	f	class:ts::system::System
srcdir	Makefile	/^srcdir = .$/;"	m
startMoveFragment	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::startMoveFragment(Fragment* fragment, NodeID node) {$/;"	f	class:ts::system::FragmentMgr
startTime	src/util/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::startTime() const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
startsWith	src/util/easylogging++.h	/^    static inline bool startsWith(const std::string& str, const std::string& start) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
stop	src/system/exec/ExecMgr.cpp	/^void ts::system::ExecMgr::stop() {$/;"	f	class:ts::system::ExecMgr
stop	src/system/message/MessageMgr.cpp	/^void MessageMgr::stop() {$/;"	f	class:ts::system::MessageMgr
storage	src/util/easylogging++.h	/^    static inline base::type::StoragePointer storage() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
storedReduceData	src/system/exec/ExecMgr.h	/^  ts::type::ReduceData* storedReduceData;$/;"	m	class:ts::system::ExecMgr
stream	src/util/easylogging++.h	/^    inline base::type::stringstream_t& stream(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
string_t	src/util/easylogging++.h	/^typedef std::wstring string_t;$/;"	t	namespace:el::base::type
stringstream_t	src/util/easylogging++.h	/^typedef std::wstringstream stringstream_t;$/;"	t	namespace:el::base::type
subdir	Makefile	/^subdir = .$/;"	m
sys	src/system/message/MessageMgr.h	/^  System* sys;$/;"	m	class:ts::system::MessageMgr
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
system	src/system/System.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/System.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/action/Action.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/action/Action.h	/^  System*  system;$/;"	m	class:ts::system::Action
system	src/system/action/Action.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/action/ActionBuilder.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/action/ActionBuilder.h	/^  System*     system;$/;"	m	class:ts::system::ActionBuilder
system	src/system/action/ActionBuilder.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/action/actions/ConfirmMove.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/action/actions/ConfirmMove.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/action/actions/Move.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/action/actions/Move.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/action/actions/Reduce.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/action/actions/Reduce.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/action/actions/StartMove.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/action/actions/StartMove.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/action/actions/Update.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/action/actions/Update.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/exec/ExecMgr.h	/^  System* system;$/;"	m	class:ts::system::ExecMgr
system	src/system/exec/ExecMgr.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/fragment/FragmentMgr.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/fragment/FragmentMgr.h	/^    System* system;$/;"	m	class:ts::system::FragmentMgr
system	src/system/fragment/FragmentMgr.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/message/MessageMgr.cpp	/^namespace system {$/;"	n	namespace:ts	file:
system	src/system/message/MessageMgr.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/message/comm/Comm.cpp	/^  namespace system {$/;"	n	namespace:ts	file:
system	src/system/message/comm/Comm.h	/^  namespace system {$/;"	n	namespace:ts
system	src/system/util/Listener.h	/^namespace system {$/;"	n	namespace:ts
system	src/system/util/Semaphore.h	/^namespace system {$/;"	n	namespace:ts
tag	src/system/message/MessageMgr.h	/^  Tag tag;$/;"	m	struct:ts::system::Message
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
test	src/system/message/comm/Comm.cpp	/^bool Comm::test(const unsigned int& request_id) {$/;"	f	class:ts::system::Comm
threading	src/util/easylogging++.h	/^namespace threading {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
timestamp	src/types/util/FragmentDeserializer.cpp	/^void FragmentDeserializer::timestamp(Fragment* fragment, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentDeserializer
timestamp	src/types/util/FragmentSerializer.cpp	/^void FragmentSerializer::timestamp(Fragment* fragment, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentSerializer
timestamp	src/types/util/FragmentSerializer.cpp	/^void FragmentSerializer::timestamp(const ts::type::Timestamp& timestamp, ts::Arc* arc) {$/;"	f	class:ts::type::util::FragmentSerializer
toFile	src/util/easylogging++.h	/^    inline bool toFile(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
toStandardOutput	src/util/easylogging++.h	/^    inline bool toStandardOutput(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
toUpper	src/util/easylogging++.h	/^    static inline std::string& toUpper(std::string& str) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
tostr	src/types/ID.cpp	/^std::string ID::tostr() const {$/;"	f	class:ts::type::ID
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
trim	src/util/easylogging++.h	/^    static inline std::string& trim(std::string& str) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
try_lock	src/util/easylogging++.h	/^    inline bool try_lock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
ts	src/distr/Distributor.h	/^namespace ts {$/;"	n
ts	src/system/System.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/System.h	/^namespace ts {$/;"	n
ts	src/system/action/Action.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/action/Action.h	/^namespace ts {$/;"	n
ts	src/system/action/ActionBuilder.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/action/ActionBuilder.h	/^namespace ts {$/;"	n
ts	src/system/action/actions/ConfirmMove.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/action/actions/ConfirmMove.h	/^namespace ts {$/;"	n
ts	src/system/action/actions/Move.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/action/actions/Move.h	/^namespace ts {$/;"	n
ts	src/system/action/actions/Reduce.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/action/actions/Reduce.h	/^namespace ts {$/;"	n
ts	src/system/action/actions/StartMove.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/action/actions/StartMove.h	/^namespace ts {$/;"	n
ts	src/system/action/actions/Update.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/action/actions/Update.h	/^namespace ts {$/;"	n
ts	src/system/exec/ExecMgr.h	/^namespace ts {$/;"	n
ts	src/system/fragment/FragmentMgr.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/fragment/FragmentMgr.h	/^namespace ts {$/;"	n
ts	src/system/message/MessageMgr.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/message/MessageMgr.h	/^namespace ts {$/;"	n
ts	src/system/message/comm/Comm.cpp	/^namespace ts {$/;"	n	file:
ts	src/system/message/comm/Comm.h	/^namespace ts {$/;"	n
ts	src/system/util/Listener.h	/^namespace ts {$/;"	n
ts	src/system/util/Semaphore.h	/^namespace ts {$/;"	n
ts	src/types/Fragment.cpp	/^namespace ts {$/;"	n	file:
ts	src/types/Fragment.h	/^namespace ts {$/;"	n
ts	src/types/FragmentTools.cpp	/^namespace ts {$/;"	n	file:
ts	src/types/FragmentTools.h	/^namespace ts {$/;"	n
ts	src/types/ID.cpp	/^namespace ts {$/;"	n	file:
ts	src/types/ID.h	/^namespace ts {$/;"	n
ts	src/types/ReduceData.h	/^namespace ts {$/;"	n
ts	src/types/ReduceDataTools.h	/^namespace ts {$/;"	n
ts	src/types/util/FragmentDeserializer.cpp	/^namespace ts {$/;"	n	file:
ts	src/types/util/FragmentDeserializer.h	/^namespace ts {$/;"	n
ts	src/types/util/FragmentSerializer.cpp	/^namespace ts {$/;"	n	file:
ts	src/types/util/FragmentSerializer.h	/^namespace ts {$/;"	n
ts	src/util/Arc.h	/^namespace ts {$/;"	n
ts	src/util/RWLock.cpp	/^namespace ts {$/;"	n	file:
ts	src/util/RWLock.h	/^namespace ts {$/;"	n
tssystem_HEADERS	Makefile	/^tssystem_HEADERS = src\/system\/System.h$/;"	m
tssystemaction_HEADERS	Makefile	/^tssystemaction_HEADERS = src\/system\/action\/Action.h \\$/;"	m
tssystemactionactions_HEADERS	Makefile	/^tssystemactionactions_HEADERS = src\/system\/action\/actions\/Reduce.h \\$/;"	m
tssystemactionactionsdir	Makefile	/^tssystemactionactionsdir = $(includedir)\/ts\/system\/action\/actions$/;"	m
tssystemactiondir	Makefile	/^tssystemactiondir = $(includedir)\/ts\/system\/action$/;"	m
tssystemdir	Makefile	/^tssystemdir = $(includedir)\/ts\/system$/;"	m
tssystemexec_HEADERS	Makefile	/^tssystemexec_HEADERS = src\/system\/exec\/ExecMgr.h$/;"	m
tssystemexecdir	Makefile	/^tssystemexecdir = $(includedir)\/ts\/system\/exec$/;"	m
tssystemfragment_HEADERS	Makefile	/^tssystemfragment_HEADERS = src\/system\/fragment\/FragmentMgr.h$/;"	m
tssystemfragmentdir	Makefile	/^tssystemfragmentdir = $(includedir)\/ts\/system\/fragment$/;"	m
tssystemmsg_HEADERS	Makefile	/^tssystemmsg_HEADERS = src\/system\/message\/MessageMgr.h \\$/;"	m
tssystemmsgcomm_HEADERS	Makefile	/^tssystemmsgcomm_HEADERS = src\/system\/message\/comm\/Comm.h$/;"	m
tssystemmsgcommdir	Makefile	/^tssystemmsgcommdir = $(includedir)\/ts\/system\/message\/comm$/;"	m
tssystemmsgdir	Makefile	/^tssystemmsgdir = $(includedir)\/ts\/system\/message$/;"	m
tssystemutil_HEADERS	Makefile	/^tssystemutil_HEADERS = src\/system\/util\/Listener.h \\$/;"	m
tssystemutildir	Makefile	/^tssystemutildir = $(includedir)\/ts\/system\/util$/;"	m
tstypes_HEADERS	Makefile	/^tstypes_HEADERS = src\/types\/Fragment.h \\$/;"	m
tstypesdir	Makefile	/^tstypesdir = $(includedir)\/ts\/types$/;"	m
tstypesutil_HEADERS	Makefile	/^tstypesutil_HEADERS = src\/types\/util\/FragmentSerializer.h \\$/;"	m
tstypesutildir	Makefile	/^tstypesutildir = $(includedir)\/ts\/types\/util$/;"	m
tsutil_HEADERS	Makefile	/^tsutil_HEADERS = src\/util\/RWLock.h \\$/;"	m
tsutildir	Makefile	/^tsutildir = $(includedir)\/ts\/util$/;"	m
type	src/types/Fragment.cpp	/^namespace type {$/;"	n	namespace:ts	file:
type	src/types/Fragment.h	/^namespace type {$/;"	n	namespace:ts
type	src/types/FragmentTools.cpp	/^namespace type {$/;"	n	namespace:ts	file:
type	src/types/FragmentTools.h	/^namespace type {$/;"	n	namespace:ts
type	src/types/ID.cpp	/^namespace type {$/;"	n	namespace:ts	file:
type	src/types/ID.h	/^namespace type {$/;"	n	namespace:ts
type	src/types/ReduceData.h	/^namespace type {$/;"	n	namespace:ts
type	src/types/ReduceDataTools.h	/^namespace type {$/;"	n	namespace:ts
type	src/types/util/FragmentDeserializer.cpp	/^namespace type {$/;"	n	namespace:ts	file:
type	src/types/util/FragmentDeserializer.h	/^namespace type {$/;"	n	namespace:ts
type	src/types/util/FragmentSerializer.cpp	/^namespace type {$/;"	n	namespace:ts	file:
type	src/types/util/FragmentSerializer.h	/^namespace type {$/;"	n	namespace:ts
type	src/util/easylogging++.h	/^namespace type {$/;"	n	namespace:el::base
typedConfigurations	src/util/easylogging++.h	/^    inline base::TypedConfigurations* typedConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
uninstallCustomFormatSpecifier	src/util/easylogging++.h	/^    inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
uninstallCustomFormatSpecifier	src/util/easylogging++.h	/^    static inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
uninstallLogDispatchCallback	src/util/easylogging++.h	/^    inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
uninstallLogDispatchCallback	src/util/easylogging++.h	/^    static inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
uninstallPerformanceTrackingCallback	src/util/easylogging++.h	/^    inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
uninstallPerformanceTrackingCallback	src/util/easylogging++.h	/^    static inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
uninstallPreRollOutCallback	src/util/easylogging++.h	/^    static inline void uninstallPreRollOutCallback(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
unit	src/util/easylogging++.h	/^        const base::type::char_t* unit;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon2
unlock	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::unlock(Fragment* fragment) {$/;"	f	class:ts::system::FragmentMgr
unlock	src/util/RWLock.cpp	/^void RWLock::unlock() {$/;"	f	class:ts::RWLock
unlock	src/util/easylogging++.h	/^    inline void unlock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
unlockFragment	src/system/System.cpp	/^void System::unlockFragment(ts::type::Fragment* fragment) {$/;"	f	class:ts::system::System
unregister	src/util/easylogging++.h	/^    inline void unregister(Logger*& logger) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
unregister	src/util/easylogging++.h	/^    inline void unregister(const T_Key& uniqKey) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
unregisterLogger	src/util/easylogging++.h	/^    static inline bool unregisterLogger(const std::string& identity) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
unsafeGetConfigByRef	src/util/easylogging++.h	/^    inline Conf_T& unsafeGetConfigByRef(Level level, std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
unsafeGetConfigByVal	src/util/easylogging++.h	/^    inline Conf_T unsafeGetConfigByVal(Level level, const std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
unsafeSet	src/util/easylogging++.h	/^    void unsafeSet(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
unsafeSetGlobally	src/util/easylogging++.h	/^    void unsafeSetGlobally(ConfigurationType configurationType, const std::string& value, bool includeGlobalLevel) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
unsafeSetIfNotExist	src/util/easylogging++.h	/^    void unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
unsafeValidateFileRolling	src/util/easylogging++.h	/^    bool unsafeValidateFileRolling(Level level, const PreRollOutCallback& PreRollOutCallback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
unsetPreRollOutCallback	src/util/easylogging++.h	/^    inline void unsetPreRollOutCallback(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
updateExternalFragment	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::updateExternalFragment(Fragment* fragment) {$/;"	f	class:ts::system::FragmentMgr
updateNeighbour	src/types/Fragment.cpp	/^void Fragment::updateNeighbour(ID id, NodeID node) {$/;"	f	class:ts::type::Fragment
updateNeighbours	src/system/fragment/FragmentMgr.cpp	/^void FragmentMgr::updateNeighbours(const ts::type::ID& id, NodeID node) {$/;"	f	class:ts::system::FragmentMgr
userFormat	src/util/easylogging++.h	/^    inline const base::type::string_t& userFormat(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
util	src/types/Fragment.h	/^namespace util {$/;"	n	namespace:ts::type
util	src/types/util/FragmentDeserializer.cpp	/^namespace util {$/;"	n	namespace:ts::type	file:
util	src/types/util/FragmentDeserializer.h	/^namespace util {$/;"	n	namespace:ts::type
util	src/types/util/FragmentSerializer.cpp	/^namespace util {$/;"	n	namespace:ts::type	file:
util	src/types/util/FragmentSerializer.h	/^namespace util {$/;"	n	namespace:ts::type
utils	src/util/easylogging++.h	/^namespace utils {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
utils	src/util/easylogging++.h	/^namespace utils {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::el::base
vRegistry	src/util/easylogging++.h	/^    inline base::VRegistry* vRegistry(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
validateAfterN	src/util/easylogging++.h	/^    bool validateAfterN(const char* filename, unsigned long int lineNumber, std::size_t n) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::RegisteredHitCounters
validateAfterNCounter	src/util/easylogging++.h	/^    inline bool validateAfterNCounter(const char* filename, unsigned long int lineNumber, std::size_t n) { \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
validateEveryN	src/util/easylogging++.h	/^    bool validateEveryN(const char* filename, unsigned long int lineNumber, std::size_t n) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::RegisteredHitCounters
validateEveryNCounter	src/util/easylogging++.h	/^    inline bool validateEveryNCounter(const char* filename, unsigned long int lineNumber, std::size_t occasion) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
validateFileRolling	src/util/easylogging++.h	/^    bool validateFileRolling(Level level, const PreRollOutCallback& PreRollOutCallback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
validateFileRolling	src/util/easylogging++.h	/^    static inline void validateFileRolling(Logger* logger, Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
validateHitCounts	src/util/easylogging++.h	/^    inline void validateHitCounts(std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
validateNTimes	src/util/easylogging++.h	/^    bool validateNTimes(const char* filename, unsigned long int lineNumber, std::size_t n) {  \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::RegisteredHitCounters
validateNTimesCounter	src/util/easylogging++.h	/^    inline bool validateNTimesCounter(const char* filename, unsigned long int lineNumber, std::size_t n) { \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
value	src/system/util/Semaphore.h	/^  std::atomic<int> value;$/;"	m	struct:ts::system::Semaphore
value	src/util/easylogging++.h	/^        double value;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon2
value	src/util/easylogging++.h	/^    inline const std::string& value(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
verbose	src/util/easylogging++.h	/^    inline void Logger::verbose(int vlevel, const T& log) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Logger
verbose	src/util/easylogging++.h	/^    inline void Logger::verbose(int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Logger
verbose	src/util/easylogging++.h	/^    inline void Logger::verbose(int, const T&) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Logger
verbose	src/util/easylogging++.h	/^    inline void Logger::verbose(int, const char*, const T&, const Args&...) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Logger
verboseLevel	src/util/easylogging++.h	/^    inline base::type::VerboseLevel verboseLevel(void) const { return m_verboseLevel; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
version	src/util/easylogging++.h	/^    static inline const std::string version(void) { return std::string("9.72"); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::VersionInfo
wait	src/system/util/Listener.cpp	/^void ts::system::Listener::wait() {$/;"	f	class:ts::system::Listener
wait	src/system/util/Semaphore.cpp	/^void ts::system::Semaphore::wait() {$/;"	f	class:ts::system::Semaphore
wasReduced	src/types/Fragment.cpp	/^bool Fragment::wasReduced() { return _vreduced; }$/;"	f	class:ts::type::Fragment
wcharPtrToCharPtr	src/util/easylogging++.h	/^    static char* wcharPtrToCharPtr(const wchar_t* line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
wildCardMatch	src/util/easylogging++.h	/^    static bool wildCardMatch(const char* str, const char* pattern) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
wlock	src/util/RWLock.cpp	/^void RWLock::wlock() {$/;"	f	class:ts::RWLock
wlock	src/util/RWLock.cpp	/^void RWLock::wlock(std::function<void(void)> f) {$/;"	f	class:ts::RWLock
workarounds	src/util/easylogging++.h	/^namespace workarounds {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder
writeIterator	src/util/easylogging++.h	/^    inline MessageBuilder& writeIterator(Iterator begin_, Iterator end_, std::size_t size_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::MessageBuilder
~AbstractRegistry	src/util/easylogging++.h	/^    virtual ~AbstractRegistry(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
~Action	src/system/action/Action.h	/^  virtual ~Action() {}$/;"	f	class:ts::system::Action
~ActionBuilder	src/system/action/ActionBuilder.cpp	/^ActionBuilder::~ActionBuilder() {$/;"	f	class:ts::system::ActionBuilder
~Arc	src/util/Arc.h	/^  ~Arc() {}$/;"	f	class:ts::Arc
~Comm	src/system/message/comm/Comm.cpp	/^Comm::~Comm() {$/;"	f	class:ts::system::Comm
~CommandLineArgs	src/util/easylogging++.h	/^    virtual ~CommandLineArgs(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
~Configuration	src/util/easylogging++.h	/^    virtual ~Configuration(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
~Configurations	src/util/easylogging++.h	/^    virtual ~Configurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
~ExecMgr	src/system/exec/ExecMgr.h	/^  ~ExecMgr() {$/;"	f	class:ts::system::ExecMgr
~Fragment	src/types/Fragment.cpp	/^Fragment::~Fragment() {$/;"	f	class:ts::type::Fragment
~Fragment	tests/fragment.h	/^  ~Fragment() {$/;"	f	class:Fragment
~FragmentMgr	src/system/fragment/FragmentMgr.cpp	/^FragmentMgr::~FragmentMgr() {$/;"	f	class:ts::system::FragmentMgr
~FragmentTools	src/types/FragmentTools.h	/^  virtual ~FragmentTools() {}$/;"	f	class:ts::type::FragmentTools
~FragmentTools	tests/fragment.h	/^  ~FragmentTools() {}$/;"	f	class:FragmentTools
~HitCounter	src/util/easylogging++.h	/^    virtual ~HitCounter(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
~ID	src/types/ID.cpp	/^ID::~ID() {}$/;"	f	class:ts::type::ID
~IterableContainer	src/util/easylogging++.h	/^    virtual ~IterableContainer(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::workarounds::IterableContainer
~LogBuilder	src/util/easylogging++.h	/^    virtual ~LogBuilder(void) { ELPP_INTERNAL_INFO(3, "Destroying log builder...")}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogBuilder
~LogFormat	src/util/easylogging++.h	/^    virtual ~LogFormat(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
~Logger	src/util/easylogging++.h	/^    virtual ~Logger(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
~MessageMgr	src/system/message/MessageMgr.cpp	/^MessageMgr::~MessageMgr() {$/;"	f	class:ts::system::MessageMgr
~Mutex	src/util/easylogging++.h	/^    virtual ~Mutex(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
~PErrorWriter	src/util/easylogging++.h	/^    virtual ~PErrorWriter(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Writer::PErrorWriter
~RWLock	src/util/RWLock.cpp	/^RWLock::~RWLock() {$/;"	f	class:ts::RWLock
~ReduceData	src/types/ReduceData.h	/^  virtual ~ReduceData() {}$/;"	f	class:ts::type::ReduceData
~ReduceData	tests/fragment.h	/^  virtual ~ReduceData() {}$/;"	f	class:ReduceData
~ReduceDataTools	src/types/ReduceDataTools.h	/^  virtual ~ReduceDataTools() {}$/;"	f	class:ts::type::ReduceDataTools
~ReduceDataTools	tests/fragment.h	/^  ~ReduceDataTools() {}$/;"	f	class:ReduceDataTools
~RegisteredLoggers	src/util/easylogging++.h	/^    virtual ~RegisteredLoggers(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
~Registry	src/util/easylogging++.h	/^    virtual ~Registry(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
~RegistryWithPred	src/util/easylogging++.h	/^    virtual ~RegistryWithPred(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
~ScopedAddFlag	src/util/easylogging++.h	/^        ~ScopedAddFlag(void) { Loggers::removeFlag(m_flag); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedAddFlag
~ScopedLock	src/util/easylogging++.h	/^    virtual ~ScopedLock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
~ScopedRemoveFlag	src/util/easylogging++.h	/^        ~ScopedRemoveFlag(void) { Loggers::addFlag(m_flag); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedRemoveFlag
~StackTrace	src/util/easylogging++.h	/^    virtual ~StackTrace(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
~Storage	src/util/easylogging++.h	/^    virtual ~Storage(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
~SysLogInitializer	src/util/easylogging++.h	/^    virtual ~SysLogInitializer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::PerformanceTrackingData::base::base::SysLogInitializer
~System	src/system/System.cpp	/^System::~System() {$/;"	f	class:ts::system::System
~ThreadSafe	src/util/easylogging++.h	/^    virtual ~ThreadSafe(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
~TypedConfigurations	src/util/easylogging++.h	/^    virtual ~TypedConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
~Writer	src/util/easylogging++.h	/^    virtual ~Writer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::base::DefaultLogBuilder::Writer
